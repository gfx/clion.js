/*
 This file is automatically generated by tool/meta.PL.
 */
// module meta
"use strict";
// auto-generated constants
/** @enum {int} */
var C = {
// metadata.h
  ASSEMBLY_HASH_ALG                : 0x0, // 0
  ASSEMBLY_PROCESSOR               : 0x0, // 0
  ASSEMBLY_MAJOR_VERSION           : 0x1, // 1
  ASSEMBLY_PROCESSOR_SIZE          : 0x1, // 1
  ASSEMBLY_MINOR_VERSION           : 0x2, // 2
  ASSEMBLY_BUILD_NUMBER            : 0x3, // 3
  ASSEMBLY_REV_NUMBER              : 0x4, // 4
  ASSEMBLY_FLAGS                   : 0x5, // 5
  ASSEMBLY_PUBLIC_KEY              : 0x6, // 6
  ASSEMBLY_NAME                    : 0x7, // 7
  ASSEMBLY_CULTURE                 : 0x8, // 8
  ASSEMBLY_SIZE                    : 0x9, // 9
  ASSEMBLYOS_PLATFORM              : 0x0, // 0
  ASSEMBLYOS_MAJOR_VERSION         : 0x1, // 1
  ASSEMBLYOS_MINOR_VERSION         : 0x2, // 2
  ASSEMBLYOS_SIZE                  : 0x3, // 3
  ASSEMBLYREF_MAJOR_VERSION        : 0x0, // 0
  ASSEMBLYREF_MINOR_VERSION        : 0x1, // 1
  ASSEMBLYREF_BUILD_NUMBER         : 0x2, // 2
  ASSEMBLYREF_REV_NUMBER           : 0x3, // 3
  ASSEMBLYREF_FLAGS                : 0x4, // 4
  ASSEMBLYREF_PUBLIC_KEY           : 0x5, // 5
  ASSEMBLYREF_NAME                 : 0x6, // 6
  ASSEMBLYREF_CULTURE              : 0x7, // 7
  ASSEMBLYREF_HASH_VALUE           : 0x8, // 8
  ASSEMBLYREF_SIZE                 : 0x9, // 9
  ASSEMBLYREFOS_PLATFORM           : 0x0, // 0
  ASSEMBLYREFOS_MAJOR_VERSION      : 0x1, // 1
  ASSEMBLYREFOS_MINOR_VERSION      : 0x2, // 2
  ASSEMBLYREFOS_ASSEMBLYREF        : 0x3, // 3
  ASSEMBLYREFOS_SIZE               : 0x4, // 4
  ASSEMBLYREFPROC_PROCESSOR        : 0x0, // 0
  ASSEMBLYREFPROC_ASSEMBLYREF      : 0x1, // 1
  ASSEMBLYREFPROC_SIZE             : 0x2, // 2
  BEGIN_DECLS                      : 0x1, // 1
  CALL_DEFAULT                     : 0x0, // 0
  CALL_C                           : 0x1, // 1
  CALL_STDCALL                     : 0x2, // 2
  CALL_THISCALL                    : 0x3, // 3
  CALL_FASTCALL                    : 0x4, // 4
  CALL_VARARG                      : 0x5, // 5
  CLASS_LAYOUT_PACKING_SIZE        : 0x0, // 0
  CLASS_LAYOUT_CLASS_SIZE          : 0x1, // 1
  CLASS_LAYOUT_PARENT              : 0x2, // 2
  CLASS_LAYOUT_SIZE                : 0x3, // 3
  CONSTANT_TYPE                    : 0x0, // 0
  CONSTANT_PADDING                 : 0x1, // 1
  CONSTANT_PARENT                  : 0x2, // 2
  CONSTANT_VALUE                   : 0x3, // 3
  CONSTANT_SIZE                    : 0x4, // 4
  CUSTOM_ATTR_METHODDEF            : 0x0, // 0
  CUSTOM_ATTR_PARENT               : 0x0, // 0
  CUSTOM_ATTR_TYPE_TYPEREF         : 0x0, // 0
  CUSTOM_ATTR_FIELDDEF             : 0x1, // 1
  CUSTOM_ATTR_TYPE                 : 0x1, // 1
  CUSTOM_ATTR_TYPE_TYPEDEF         : 0x1, // 1
  CUSTOM_ATTR_TYPEREF              : 0x2, // 2
  CUSTOM_ATTR_TYPE_METHODDEF       : 0x2, // 2
  CUSTOM_ATTR_VALUE                : 0x2, // 2
  CUSTOM_ATTR_SIZE                 : 0x3, // 3
  CUSTOM_ATTR_TYPEDEF              : 0x3, // 3
  CUSTOM_ATTR_TYPE_BITS            : 0x3, // 3
  CUSTOM_ATTR_TYPE_MEMBERREF       : 0x3, // 3
  CUSTOM_ATTR_PARAMDEF             : 0x4, // 4
  CUSTOM_ATTR_TYPE_STRING          : 0x4, // 4
  CUSTOM_ATTR_BITS                 : 0x5, // 5
  CUSTOM_ATTR_INTERFACE            : 0x5, // 5
  CUSTOM_ATTR_MEMBERREF            : 0x6, // 6
  CUSTOM_ATTR_MODULE               : 0x7, // 7
  CUSTOM_ATTR_TYPE_MASK            : 0x7, // 7
  CUSTOM_ATTR_PERMISSION           : 0x8, // 8
  CUSTOM_ATTR_PROPERTY             : 0x9, // 9
  CUSTOM_ATTR_EVENT                : 0xa, // 10
  CUSTOM_ATTR_SIGNATURE            : 0xb, // 11
  CUSTOM_ATTR_MODULEREF            : 0xc, // 12
  CUSTOM_ATTR_TYPESPEC             : 0xd, // 13
  CUSTOM_ATTR_ASSEMBLY             : 0xe, // 14
  CUSTOM_ATTR_ASSEMBLYREF          : 0xf, // 15
  CUSTOM_ATTR_FILE                 : 0x10, // 16
  CUSTOM_ATTR_EXP_TYPE             : 0x11, // 17
  CUSTOM_ATTR_MANIFEST             : 0x12, // 18
  CUSTOM_ATTR_GENERICPAR           : 0x13, // 19
  CUSTOM_ATTR_MASK                 : 0x1f, // 31
  DECL_SECURITY_ACTION             : 0x0, // 0
  DECL_SECURITY_PARENT             : 0x1, // 1
  DECL_SECURITY_PERMISSIONSET      : 0x2, // 2
  DECL_SECURITY_SIZE               : 0x3, // 3
  END_DECLS                        : 0x1, // 1
  EVENT_FLAGS                      : 0x0, // 0
  EVENT_MAP_PARENT                 : 0x0, // 0
  EVENT_POINTER_EVENT              : 0x0, // 0
  EVENT_MAP_EVENTLIST              : 0x1, // 1
  EVENT_NAME                       : 0x1, // 1
  EVENT_POINTER_SIZE               : 0x1, // 1
  EVENT_MAP_SIZE                   : 0x2, // 2
  EVENT_TYPE                       : 0x2, // 2
  EVENT_SIZE                       : 0x3, // 3
  EXCEPTION_CLAUSE_NONE            : 0x0, // 0
  EXCEPTION_CLAUSE_FILTER          : 0x1, // 1
  EXCEPTION_CLAUSE_FINALLY         : 0x2, // 2
  EXCEPTION_CLAUSE_FAULT           : 0x4, // 4
  EXP_TYPE_FLAGS                   : 0x0, // 0
  EXP_TYPE_TYPEDEF                 : 0x1, // 1
  EXP_TYPE_NAME                    : 0x2, // 2
  EXP_TYPE_NAMESPACE               : 0x3, // 3
  EXP_TYPE_IMPLEMENTATION          : 0x4, // 4
  EXP_TYPE_SIZE                    : 0x5, // 5
  FIELD_FLAGS                      : 0x0, // 0
  FIELD_LAYOUT_OFFSET              : 0x0, // 0
  FIELD_MARSHAL_PARENT             : 0x0, // 0
  FIELD_POINTER_FIELD              : 0x0, // 0
  FIELD_RVA_RVA                    : 0x0, // 0
  FIELD_LAYOUT_FIELD               : 0x1, // 1
  FIELD_MARSHAL_NATIVE_TYPE        : 0x1, // 1
  FIELD_NAME                       : 0x1, // 1
  FIELD_POINTER_SIZE               : 0x1, // 1
  FIELD_RVA_FIELD                  : 0x1, // 1
  FIELD_LAYOUT_SIZE                : 0x2, // 2
  FIELD_MARSHAL_SIZE               : 0x2, // 2
  FIELD_RVA_SIZE                   : 0x2, // 2
  FIELD_SIGNATURE                  : 0x2, // 2
  FIELD_SIZE                       : 0x3, // 3
  FILE_FLAGS                       : 0x0, // 0
  FILE_NAME                        : 0x1, // 1
  FILE_HASH_VALUE                  : 0x2, // 2
  FILE_SIZE                        : 0x3, // 3
  GENERICPARAM_NUMBER              : 0x0, // 0
  GENERICPARAM_FLAGS               : 0x1, // 1
  GENERICPARAM_OWNER               : 0x2, // 2
  GENERICPARAM_NAME                : 0x3, // 3
  GENERICPARAM_SIZE                : 0x4, // 4
  GENPARCONSTRAINT_GENERICPAR      : 0x0, // 0
  GENPARCONSTRAINT_CONSTRAINT      : 0x1, // 1
  GENPARCONSTRAINT_SIZE            : 0x2, // 2
  HAS_DECL_SECURITY_TYPEDEF        : 0x0, // 0
  HAS_FIELD_MARSHAL_FIELDSREF      : 0x0, // 0
  HAS_SEMANTICS_EVENT              : 0x0, // 0
  HAS_DECL_SECURITY_METHODDEF      : 0x1, // 1
  HAS_FIELD_MARSHAL_BITS           : 0x1, // 1
  HAS_FIELD_MARSHAL_MASK           : 0x1, // 1
  HAS_FIELD_MARSHAL_PARAMDEF       : 0x1, // 1
  HAS_SEMANTICS_BITS               : 0x1, // 1
  HAS_SEMANTICS_MASK               : 0x1, // 1
  HAS_SEMANTICS_PROPERTY           : 0x1, // 1
  HAS_DECL_SECURITY_ASSEMBLY       : 0x2, // 2
  HAS_DECL_SECURITY_BITS           : 0x2, // 2
  HAS_DECL_SECURITY_MASK           : 0x3, // 3
  HASCONSTANT_FIEDDEF              : 0x0, // 0
  HASCONSTANT_PARAM                : 0x1, // 1
  HASCONSTANT_BITS                 : 0x2, // 2
  HASCONSTANT_PROPERTY             : 0x2, // 2
  HASCONSTANT_MASK                 : 0x3, // 3
  IMAGE_OK                         : 0x0, // 0
  IMAGE_ERROR_ERRNO                : 0x1, // 1
  IMAGE_MISSING_ASSEMBLYREF        : 0x2, // 2
  IMAGE_IMAGE_INVALID              : 0x3, // 3
  IMPLEMENTATION_FILE              : 0x0, // 0
  IMPLEMENTATION_ASSEMBLYREF       : 0x1, // 1
  IMPLEMENTATION_BITS              : 0x2, // 2
  IMPLEMENTATION_EXP_TYPE          : 0x2, // 2
  IMPLEMENTATION_MASK              : 0x3, // 3
  IMPLMAP_FLAGS                    : 0x0, // 0
  IMPLMAP_MEMBER                   : 0x1, // 1
  IMPLMAP_NAME                     : 0x2, // 2
  IMPLMAP_SCOPE                    : 0x3, // 3
  IMPLMAP_SIZE                     : 0x4, // 4
  INTERFACEIMPL_CLASS              : 0x0, // 0
  INTERFACEIMPL_INTERFACE          : 0x1, // 1
  INTERFACEIMPL_SIZE               : 0x2, // 2
  MANIFEST_OFFSET                  : 0x0, // 0
  MANIFEST_FLAGS                   : 0x1, // 1
  MANIFEST_NAME                    : 0x2, // 2
  MANIFEST_IMPLEMENTATION          : 0x3, // 3
  MANIFEST_SIZE                    : 0x4, // 4
  MARSHAL_CONV_NONE                : 0x0, // 0
  MARSHAL_CONV_BOOL_VARIANTBOOL    : 0x1, // 1
  MARSHAL_CONV_BOOL_I4             : 0x2, // 2
  MARSHAL_CONV_STR_BSTR            : 0x3, // 3
  MARSHAL_CONV_STR_LPSTR           : 0x4, // 4
  MARSHAL_CONV_LPSTR_STR           : 0x5, // 5
  MARSHAL_CONV_LPTSTR_STR          : 0x6, // 6
  MARSHAL_CONV_STR_LPWSTR          : 0x7, // 7
  MARSHAL_CONV_LPWSTR_STR          : 0x8, // 8
  MARSHAL_CONV_STR_LPTSTR          : 0x9, // 9
  MARSHAL_CONV_STR_ANSIBSTR        : 0xa, // 10
  MARSHAL_CONV_STR_TBSTR           : 0xb, // 11
  MARSHAL_CONV_STR_BYVALSTR        : 0xc, // 12
  MARSHAL_CONV_STR_BYVALWSTR       : 0xd, // 13
  MARSHAL_CONV_SB_LPSTR            : 0xe, // 14
  MARSHAL_CONV_SB_LPTSTR           : 0xf, // 15
  MARSHAL_CONV_SB_LPWSTR           : 0x10, // 16
  MARSHAL_CONV_LPSTR_SB            : 0x11, // 17
  MARSHAL_CONV_LPTSTR_SB           : 0x12, // 18
  MARSHAL_CONV_LPWSTR_SB           : 0x13, // 19
  MARSHAL_CONV_ARRAY_BYVALARRAY    : 0x14, // 20
  MARSHAL_CONV_ARRAY_BYVALCHARARRAY: 0x15, // 21
  MARSHAL_CONV_ARRAY_SAVEARRAY     : 0x16, // 22
  MARSHAL_CONV_ARRAY_LPARRAY       : 0x17, // 23
  MARSHAL_FREE_LPARRAY             : 0x18, // 24
  MARSHAL_CONV_OBJECT_INTERFACE    : 0x19, // 25
  MARSHAL_CONV_OBJECT_IDISPATCH    : 0x1a, // 26
  MARSHAL_CONV_OBJECT_IUNKNOWN     : 0x1b, // 27
  MARSHAL_CONV_OBJECT_STRUCT       : 0x1c, // 28
  MARSHAL_CONV_DEL_FTN             : 0x1d, // 29
  MARSHAL_CONV_FTN_DEL             : 0x1e, // 30
  MARSHAL_FREE_ARRAY               : 0x1f, // 31
  MARSHAL_CONV_BSTR_STR            : 0x20, // 32
  MARSHAL_CONV_SAFEHANDLE          : 0x21, // 33
  MARSHAL_CONV_HANDLEREF           : 0x22, // 34
  MEMBERFORWD_FIELDDEF             : 0x0, // 0
  MEMBERFORWD_BITS                 : 0x1, // 1
  MEMBERFORWD_MASK                 : 0x1, // 1
  MEMBERFORWD_METHODDEF            : 0x1, // 1
  MEMBERREF_CLASS                  : 0x0, // 0
  MEMBERREF_PARENT_TYPEDEF         : 0x0, // 0
  MEMBERREF_NAME                   : 0x1, // 1
  MEMBERREF_PARENT_TYPEREF         : 0x1, // 1
  MEMBERREF_PARENT_MODULEREF       : 0x2, // 2
  MEMBERREF_SIGNATURE              : 0x2, // 2
  MEMBERREF_PARENT_BITS            : 0x3, // 3
  MEMBERREF_PARENT_METHODDEF       : 0x3, // 3
  MEMBERREF_SIZE                   : 0x3, // 3
  MEMBERREF_PARENT_TYPESPEC        : 0x4, // 4
  MEMBERREF_PARENT_MASK            : 0x7, // 7
  METHOD_POINTER_METHOD            : 0x0, // 0
  METHOD_RVA                       : 0x0, // 0
  METHOD_SEMA_SEMANTICS            : 0x0, // 0
  METHOD_IMPLFLAGS                 : 0x1, // 1
  METHOD_POINTER_SIZE              : 0x1, // 1
  METHOD_SEMA_METHOD               : 0x1, // 1
  METHOD_FLAGS                     : 0x2, // 2
  METHOD_SEMA_ASSOCIATION          : 0x2, // 2
  METHOD_NAME                      : 0x3, // 3
  METHOD_SEMA_SIZE                 : 0x3, // 3
  METHOD_SIGNATURE                 : 0x4, // 4
  METHOD_PARAMLIST                 : 0x5, // 5
  METHOD_SIZE                      : 0x6, // 6
  METHODDEFORREF_METHODDEF         : 0x0, // 0
  METHODDEFORREF_BITS              : 0x1, // 1
  METHODDEFORREF_MASK              : 0x1, // 1
  METHODDEFORREF_METHODREF         : 0x1, // 1
  METHODIMPL_CLASS                 : 0x0, // 0
  METHODIMPL_BODY                  : 0x1, // 1
  METHODIMPL_DECLARATION           : 0x2, // 2
  METHODIMPL_SIZE                  : 0x3, // 3
  METHODSPEC_METHOD                : 0x0, // 0
  METHODSPEC_SIGNATURE             : 0x1, // 1
  METHODSPEC_SIZE                  : 0x2, // 2
  MODULE_GENERATION                : 0x0, // 0
  MODULE_NAME                      : 0x1, // 1
  MODULE_MVID                      : 0x2, // 2
  MODULE_ENC                       : 0x3, // 3
  MODULE_ENCBASE                   : 0x4, // 4
  MODULE_SIZE                      : 0x5, // 5
  MODULEREF_NAME                   : 0x0, // 0
  MODULEREF_SIZE                   : 0x1, // 1
  NATIVE_BOOLEAN                   : 0x2, // 2
  NATIVE_I1                        : 0x3, // 3
  NATIVE_U1                        : 0x4, // 4
  NATIVE_I2                        : 0x5, // 5
  NATIVE_U2                        : 0x6, // 6
  NATIVE_I4                        : 0x7, // 7
  NATIVE_U4                        : 0x8, // 8
  NATIVE_I8                        : 0x9, // 9
  NATIVE_U8                        : 0xa, // 10
  NATIVE_R4                        : 0xb, // 11
  NATIVE_R8                        : 0xc, // 12
  NATIVE_CURRENCY                  : 0xf, // 15
  NATIVE_BSTR                      : 0x13, // 19
  NATIVE_LPSTR                     : 0x14, // 20
  NATIVE_LPWSTR                    : 0x15, // 21
  NATIVE_LPTSTR                    : 0x16, // 22
  NATIVE_BYVALTSTR                 : 0x17, // 23
  NATIVE_IUNKNOWN                  : 0x19, // 25
  NATIVE_IDISPATCH                 : 0x1a, // 26
  NATIVE_STRUCT                    : 0x1b, // 27
  NATIVE_INTERFACE                 : 0x1c, // 28
  NATIVE_SAFEARRAY                 : 0x1d, // 29
  NATIVE_BYVALARRAY                : 0x1e, // 30
  NATIVE_INT                       : 0x1f, // 31
  NATIVE_UINT                      : 0x20, // 32
  NATIVE_VBBYREFSTR                : 0x22, // 34
  NATIVE_ANSIBSTR                  : 0x23, // 35
  NATIVE_TBSTR                     : 0x24, // 36
  NATIVE_VARIANTBOOL               : 0x25, // 37
  NATIVE_FUNC                      : 0x26, // 38
  NATIVE_ASANY                     : 0x28, // 40
  NATIVE_LPARRAY                   : 0x2a, // 42
  NATIVE_LPSTRUCT                  : 0x2b, // 43
  NATIVE_CUSTOM                    : 0x2c, // 44
  NATIVE_ERROR                     : 0x2d, // 45
  NATIVE_MAX                       : 0x50, // 80
  NESTED_CLASS_NESTED              : 0x0, // 0
  NESTED_CLASS_ENCLOSING           : 0x1, // 1
  NESTED_CLASS_SIZE                : 0x2, // 2
  PARAM_FLAGS                      : 0x0, // 0
  PARAM_POINTER_PARAM              : 0x0, // 0
  PARAM_POINTER_SIZE               : 0x1, // 1
  PARAM_SEQUENCE                   : 0x1, // 1
  PARAM_NAME                       : 0x2, // 2
  PARAM_SIZE                       : 0x3, // 3
  PARSE_TYPE                       : 0x0, // 0
  PARSE_MOD_TYPE                   : 0x1, // 1
  PARSE_LOCAL                      : 0x2, // 2
  PARSE_PARAM                      : 0x3, // 3
  PARSE_RET                        : 0x4, // 4
  PARSE_FIELD                      : 0x5, // 5
  PROPERTY_FLAGS                   : 0x0, // 0
  PROPERTY_MAP_PARENT              : 0x0, // 0
  PROPERTY_POINTER_PROPERTY        : 0x0, // 0
  PROPERTY_MAP_PROPERTY_LIST       : 0x1, // 1
  PROPERTY_NAME                    : 0x1, // 1
  PROPERTY_POINTER_SIZE            : 0x1, // 1
  PROPERTY_MAP_SIZE                : 0x2, // 2
  PROPERTY_TYPE                    : 0x2, // 2
  PROPERTY_SIZE                    : 0x3, // 3
  RESOLTION_SCOPE_MODULE           : 0x0, // 0
  RESOLTION_SCOPE_MODULEREF        : 0x1, // 1
  RESOLTION_SCOPE_ASSEMBLYREF      : 0x2, // 2
  RESOLTION_SCOPE_BITS             : 0x2, // 2
  RESOLTION_SCOPE_MASK             : 0x3, // 3
  RESOLTION_SCOPE_TYPEREF          : 0x3, // 3
  STAND_ALONE_SIGNATURE            : 0x0, // 0
  STAND_ALONE_SIGNATURE_SIZE       : 0x1, // 1
  TABLE_MODULE                     : 0x0, // 0
  TABLE_TYPEREF                    : 0x1, // 1
  TABLE_TYPEDEF                    : 0x2, // 2
  TABLE_FIELD_POINTER              : 0x3, // 3
  TABLE_FIELD                      : 0x4, // 4
  TABLE_METHOD_POINTER             : 0x5, // 5
  TABLE_METHOD                     : 0x6, // 6
  TABLE_PARAM_POINTER              : 0x7, // 7
  TABLE_PARAM                      : 0x8, // 8
  TABLE_INTERFACEIMPL              : 0x9, // 9
  TABLE_MEMBERREF                  : 0xa, // 10
  TABLE_CONSTANT                   : 0xb, // 11
  TABLE_CUSTOMATTRIBUTE            : 0xc, // 12
  TABLE_FIELDMARSHAL               : 0xd, // 13
  TABLE_DECLSECURITY               : 0xe, // 14
  TABLE_CLASSLAYOUT                : 0xf, // 15
  TABLE_FIELDLAYOUT                : 0x10, // 16
  TABLE_STANDALONESIG              : 0x11, // 17
  TABLE_EVENTMAP                   : 0x12, // 18
  TABLE_EVENT_POINTER              : 0x13, // 19
  TABLE_EVENT                      : 0x14, // 20
  TABLE_PROPERTYMAP                : 0x15, // 21
  TABLE_PROPERTY_POINTER           : 0x16, // 22
  TABLE_PROPERTY                   : 0x17, // 23
  TABLE_METHODSEMANTICS            : 0x18, // 24
  TABLE_METHODIMPL                 : 0x19, // 25
  TABLE_MODULEREF                  : 0x1a, // 26
  TABLE_TYPESPEC                   : 0x1b, // 27
  TABLE_IMPLMAP                    : 0x1c, // 28
  TABLE_FIELDRVA                   : 0x1d, // 29
  TABLE_UNUSED6                    : 0x1e, // 30
  TABLE_UNUSED7                    : 0x1f, // 31
  TABLE_ASSEMBLY                   : 0x20, // 32
  TABLE_ASSEMBLYPROCESSOR          : 0x21, // 33
  TABLE_ASSEMBLYOS                 : 0x22, // 34
  TABLE_ASSEMBLYREF                : 0x23, // 35
  TABLE_ASSEMBLYREFPROCESSOR       : 0x24, // 36
  TABLE_ASSEMBLYREFOS              : 0x25, // 37
  TABLE_FILE                       : 0x26, // 38
  TABLE_EXPORTEDTYPE               : 0x27, // 39
  TABLE_MANIFESTRESOURCE           : 0x28, // 40
  TABLE_NESTEDCLASS                : 0x29, // 41
  TABLE_GENERICPARAM               : 0x2a, // 42
  TABLE_METHODSPEC                 : 0x2b, // 43
  TABLE_GENERICPARAMCONSTRAINT     : 0x2c, // 44
  TABLE_LAST                       : 0x2c, // 44
  TYPE_END                         : 0x0, // 0
  TYPE_VOID                        : 0x1, // 1
  TYPE_BOOLEAN                     : 0x2, // 2
  TYPE_CHAR                        : 0x3, // 3
  TYPE_I1                          : 0x4, // 4
  TYPE_U1                          : 0x5, // 5
  TYPE_I2                          : 0x6, // 6
  TYPE_U2                          : 0x7, // 7
  TYPE_I4                          : 0x8, // 8
  TYPE_U4                          : 0x9, // 9
  TYPE_I8                          : 0xa, // 10
  TYPE_U8                          : 0xb, // 11
  TYPE_R4                          : 0xc, // 12
  TYPE_R8                          : 0xd, // 13
  TYPE_STRING                      : 0xe, // 14
  TYPE_PTR                         : 0xf, // 15
  TYPE_BYREF                       : 0x10, // 16
  TYPE_VALUETYPE                   : 0x11, // 17
  TYPE_CLASS                       : 0x12, // 18
  TYPE_VAR                         : 0x13, // 19
  TYPE_ARRAY                       : 0x14, // 20
  TYPE_GENERICINST                 : 0x15, // 21
  TYPE_TYPEDBYREF                  : 0x16, // 22
  TYPE_I                           : 0x18, // 24
  TYPE_U                           : 0x19, // 25
  TYPE_FNPTR                       : 0x1b, // 27
  TYPE_OBJECT                      : 0x1c, // 28
  TYPE_SZARRAY                     : 0x1d, // 29
  TYPE_MVAR                        : 0x1e, // 30
  TYPE_CMOD_REQD                   : 0x1f, // 31
  TYPE_CMOD_OPT                    : 0x20, // 32
  TYPE_INTERNAL                    : 0x21, // 33
  TYPE_MODIFIER                    : 0x40, // 64
  TYPE_SENTINEL                    : 0x41, // 65
  TYPE_PINNED                      : 0x45, // 69
  TYPE_ENUM                        : 0x55, // 85
  TYPEDEF_FLAGS                    : 0x0, // 0
  TYPEDEF_NAME                     : 0x1, // 1
  TYPEDEF_NAMESPACE                : 0x2, // 2
  TYPEDEF_EXTENDS                  : 0x3, // 3
  TYPEDEF_FIELD_LIST               : 0x4, // 4
  TYPEDEF_METHOD_LIST              : 0x5, // 5
  TYPEDEF_SIZE                     : 0x6, // 6
  TYPEDEFORREF_TYPEDEF             : 0x0, // 0
  TYPEDEFORREF_TYPEREF             : 0x1, // 1
  TYPEDEFORREF_BITS                : 0x2, // 2
  TYPEDEFORREF_TYPESPEC            : 0x2, // 2
  TYPEDEFORREF_MASK                : 0x3, // 3
  TYPEORMETHOD_TYPE                : 0x0, // 0
  TYPEORMETHOD_BITS                : 0x1, // 1
  TYPEORMETHOD_MASK                : 0x1, // 1
  TYPEORMETHOD_METHOD              : 0x1, // 1
  TYPEREF_SCOPE                    : 0x0, // 0
  TYPEREF_NAME                     : 0x1, // 1
  TYPEREF_NAMESPACE                : 0x2, // 2
  TYPEREF_SIZE                     : 0x3, // 3
  TYPESPEC_SIGNATURE               : 0x0, // 0
  TYPESPEC_SIZE                    : 0x1, // 1
  VARIANT_EMPTY                    : 0x0, // 0
  VARIANT_NULL                     : 0x1, // 1
  VARIANT_I2                       : 0x2, // 2
  VARIANT_I4                       : 0x3, // 3
  VARIANT_R4                       : 0x4, // 4
  VARIANT_R8                       : 0x5, // 5
  VARIANT_CY                       : 0x6, // 6
  VARIANT_DATE                     : 0x7, // 7
  VARIANT_BSTR                     : 0x8, // 8
  VARIANT_DISPATCH                 : 0x9, // 9
  VARIANT_ERROR                    : 0xa, // 10
  VARIANT_BOOL                     : 0xb, // 11
  VARIANT_VARIANT                  : 0xc, // 12
  VARIANT_UNKNOWN                  : 0xd, // 13
  VARIANT_DECIMAL                  : 0xe, // 14
  VARIANT_I1                       : 0x10, // 16
  VARIANT_UI1                      : 0x11, // 17
  VARIANT_UI2                      : 0x12, // 18
  VARIANT_UI4                      : 0x13, // 19
  VARIANT_I8                       : 0x14, // 20
  VARIANT_UI8                      : 0x15, // 21
  VARIANT_INT                      : 0x16, // 22
  VARIANT_UINT                     : 0x17, // 23
  VARIANT_VOID                     : 0x18, // 24
  VARIANT_HRESULT                  : 0x19, // 25
  VARIANT_PTR                      : 0x1a, // 26
  VARIANT_SAFEARRAY                : 0x1b, // 27
  VARIANT_CARRAY                   : 0x1c, // 28
  VARIANT_USERDEFINED              : 0x1d, // 29
  VARIANT_LPSTR                    : 0x1e, // 30
  VARIANT_LPWSTR                   : 0x1f, // 31
  VARIANT_RECORD                   : 0x24, // 36
  VARIANT_FILETIME                 : 0x40, // 64
  VARIANT_BLOB                     : 0x41, // 65
  VARIANT_STREAM                   : 0x42, // 66
  VARIANT_STORAGE                  : 0x43, // 67
  VARIANT_STREAMED_OBJECT          : 0x44, // 68
  VARIANT_STORED_OBJECT            : 0x45, // 69
  VARIANT_BLOB_OBJECT              : 0x46, // 70
  VARIANT_CF                       : 0x47, // 71
  VARIANT_CLSID                    : 0x48, // 72
  VARIANT_VECTOR                   : 0x1000, // 4096
  VARIANT_ARRAY                    : 0x2000, // 8192
  VARIANT_BYREF                    : 0x4000, // 16384
  ZERO_LEN_ARRAY                   : 0x0, // 0
// tokentype.h
  TOKEN_MODULE           : 0x0, // 0
  TOKEN_TYPE_REF         : 0x1000000, // 16777216
  TOKEN_TYPE_DEF         : 0x2000000, // 33554432
  TOKEN_FIELD_DEF        : 0x4000000, // 67108864
  TOKEN_METHOD_DEF       : 0x6000000, // 100663296
  TOKEN_PARAM_DEF        : 0x8000000, // 134217728
  TOKEN_INTERFACE_IMPL   : 0x9000000, // 150994944
  TOKEN_MEMBER_REF       : 0xa000000, // 167772160
  TOKEN_CUSTOM_ATTRIBUTE : 0xc000000, // 201326592
  TOKEN_PERMISSION       : 0xe000000, // 234881024
  TOKEN_SIGNATURE        : 0x11000000, // 285212672
  TOKEN_EVENT            : 0x14000000, // 335544320
  TOKEN_PROPERTY         : 0x17000000, // 385875968
  TOKEN_MODULE_REF       : 0x1a000000, // 436207616
  TOKEN_TYPE_SPEC        : 0x1b000000, // 452984832
  TOKEN_ASSEMBLY         : 0x20000000, // 536870912
  TOKEN_ASSEMBLY_REF     : 0x23000000, // 587202560
  TOKEN_FILE             : 0x26000000, // 637534208
  TOKEN_EXPORTED_TYPE    : 0x27000000, // 654311424
  TOKEN_MANIFEST_RESOURCE: 0x28000000, // 671088640
  TOKEN_GENERIC_PARAM    : 0x2a000000, // 704643072
  TOKEN_METHOD_SPEC      : 0x2b000000, // 721420288
  TOKEN_STRING           : 0x70000000, // 1879048192
  TOKEN_NAME             : 0x71000000, // 1895825408
  TOKEN_BASE_TYPE        : 0x72000000, // 1912602624
// class-internals.h
  APPDOMAIN_CREATED                    : 0x0, // 0
  APPDOMAIN_UNLOADING_START            : 0x1, // 1
  APPDOMAIN_UNLOADING                  : 0x2, // 2
  APPDOMAIN_UNLOADED                   : 0x3, // 3
  BITSET_DONT_FREE                     : 0x1, // 1
  CLASS_PROP_EXCEPTION_DATA            : 0x0, // 0
  DECLSEC_ACTION_MIN                   : 0x1, // 1
  DECLSEC_FLAG_REQUEST                 : 0x1, // 1
  DECLSEC_FLAG_DEMAND                  : 0x2, // 2
  DECLSEC_FLAG_ASSERT                  : 0x4, // 4
  DECLSEC_FLAG_DENY                    : 0x8, // 8
  DECLSEC_FLAG_PERMITONLY              : 0x10, // 16
  DECLSEC_ACTION_MAX                   : 0x12, // 18
  DECLSEC_FLAG_LINKDEMAND              : 0x20, // 32
  DECLSEC_FLAG_INHERITANCEDEMAND       : 0x40, // 64
  DECLSEC_FLAG_REQUEST_MINIMUM         : 0x80, // 128
  DECLSEC_FLAG_REQUEST_OPTIONAL        : 0x100, // 256
  DECLSEC_FLAG_REQUEST_REFUSE          : 0x200, // 512
  DECLSEC_FLAG_PREJIT_GRANT            : 0x400, // 1024
  DECLSEC_FLAG_PREJIT_DENY             : 0x800, // 2048
  DECLSEC_FLAG_NONCAS_DEMAND           : 0x1000, // 4096
  DECLSEC_FLAG_NONCAS_LINKDEMAND       : 0x2000, // 8192
  DECLSEC_FLAG_NONCAS_INHERITANCEDEMAND: 0x4000, // 16384
  DECLSEC_FLAG_LINKDEMAND_CHOICE       : 0x8000, // 32768
  DECLSEC_FLAG_INHERITANCEDEMAND_CHOICE: 0x10000, // 65536
  DECLSEC_FLAG_DEMAND_CHOICE           : 0x20000, // 131072
  DEFAULT_SUPERTABLE_SIZE              : 0x6, // 6
  DEPRECATED                           : 0x1, // 1
  DL_LAZY                              : 0x1, // 1
  DL_LOCAL                             : 0x2, // 2
  DL_MASK                              : 0x3, // 3
  ERROR_NONE                           : 0x0, // 0
  ERROR_FREE_STRINGS                   : 0x1, // 1
  ERROR_MISSING_METHOD                 : 0x1, // 1
  ERROR_INCOMPLETE                     : 0x2, // 2
  ERROR_MISSING_FIELD                  : 0x2, // 2
  ERROR_TYPE_LOAD                      : 0x3, // 3
  ERROR_FILE_NOT_FOUND                 : 0x4, // 4
  ERROR_BAD_IMAGE                      : 0x5, // 5
  ERROR_OUT_OF_MEMORY                  : 0x6, // 6
  ERROR_ARGUMENT                       : 0x7, // 7
  ERROR_NOT_VERIFIABLE                 : 0x8, // 8
  ERROR_GENERIC                        : 0x9, // 9
  EXCEPTION_NONE                       : 0x0, // 0
  EXCEPTION_SECURITY_LINKDEMAND        : 0x1, // 1
  EXCEPTION_SECURITY_INHERITANCEDEMAND : 0x2, // 2
  EXCEPTION_INVALID_PROGRAM            : 0x3, // 3
  EXCEPTION_UNVERIFIABLE_IL            : 0x4, // 4
  EXCEPTION_MISSING_METHOD             : 0x5, // 5
  EXCEPTION_MISSING_FIELD              : 0x6, // 6
  EXCEPTION_TYPE_LOAD                  : 0x7, // 7
  EXCEPTION_FILE_NOT_FOUND             : 0x8, // 8
  EXCEPTION_METHOD_ACCESS              : 0x9, // 9
  EXCEPTION_FIELD_ACCESS               : 0xa, // 10
  EXCEPTION_GENERIC_SHARING_FAILED     : 0xb, // 11
  EXCEPTION_BAD_IMAGE                  : 0xc, // 12
  EXCEPTION_OBJECT_SUPPLIED            : 0xd, // 13
  EXCEPTION_OUT_OF_MEMORY              : 0xe, // 14
  GENERIC_SHARING_NONE                 : 0x0, // 0
  GENERIC_CONTEXT_USED_CLASS           : 0x1, // 1
  GENERIC_SHARING_COLLECTIONS          : 0x1, // 1
  GENERIC_CONTEXT_USED_METHOD          : 0x2, // 2
  GENERIC_SHARING_CORLIB               : 0x2, // 2
  GENERIC_CONTEXT_USED_BOTH            : 0x3, // 3
  GENERIC_SHARING_ALL                  : 0x3, // 3
  HASH_CONSERVATIVE_GC                 : 0x0, // 0
  HASH_KEY_GC                          : 0x1, // 1
  HASH_VALUE_GC                        : 0x2, // 2
  HASH_KEY_VALUE_GC                    : 0x3, // 3
  INTERNAL                             : 0x1, // 1
  JIT_INFO_TABLE_CHUNK_SIZE            : 0x40, // 64
  LLVM_INTERNAL                        : 0x1, // 1
  METHOD_PROP_GENERIC_CONTAINER        : 0x0, // 0
  PROCESSOR_ARCHITECTURE_NONE          : 0x0, // 0
  PROCESSOR_ARCHITECTURE_MSIL          : 0x1, // 1
  PROCESSOR_ARCHITECTURE_X86           : 0x2, // 2
  PROCESSOR_ARCHITECTURE_IA64          : 0x3, // 3
  PROCESSOR_ARCHITECTURE_AMD64         : 0x4, // 4
  PROP_DYNAMIC_CATTR                   : 0x1000, // 4096
  PUBLIC_KEY_TOKEN_LENGTH              : 0x11, // 17
  REMOTING_TARGET_UNKNOWN              : 0x0, // 0
  REMOTING_TARGET_APPDOMAIN            : 0x1, // 1
  REMOTING_TARGET_COMINTEROP           : 0x2, // 2
  SECTION_TEXT                         : 0x0, // 0
  SECTION_RSRC                         : 0x1, // 1
  SECTION_RELOC                        : 0x2, // 2
  SECTION_MAX                          : 0x3, // 3
  TYPE_NAME_FORMAT_IL                  : 0x0, // 0
  TYPE_NAME_FORMAT_REFLECTION          : 0x1, // 1
  TYPE_NAME_FORMAT_FULL_NAME           : 0x2, // 2
  TYPE_NAME_FORMAT_ASSEMBLY_QUALIFIED  : 0x3, // 3
// tabledefs.h
  ASSEMBLY_HASH_NONE                            : 0x0, // 0
  ASSEMBLY_HASH_MD5                             : 0x8003, // 32771
  ASSEMBLY_HASH_SHA1                            : 0x8004, // 32772
  ASSEMBLYREF_FULL_PUBLIC_KEY_FLAG              : 0x1, // 1
  ASSEMBLYREF_RETARGETABLE_FLAG                 : 0x100, // 256
  ASSEMBLYREF_DISABLEJITCOMPILE_OPTIMIZER_FLAG  : 0x4000, // 16384
  ASSEMBLYREF_ENABLEJITCOMPILE_TRACKING_FLAG    : 0x8000, // 32768
  EVENT_SPECIALNAME                             : 0x200, // 512
  EVENT_RTSPECIALNAME                           : 0x400, // 1024
  FIELD_ATTRIBUTE_COMPILER_CONTROLLED           : 0x0, // 0
  FIELD_ATTRIBUTE_PRIVATE                       : 0x1, // 1
  FIELD_ATTRIBUTE_FAM_AND_ASSEM                 : 0x2, // 2
  FIELD_ATTRIBUTE_ASSEMBLY                      : 0x3, // 3
  FIELD_ATTRIBUTE_FAMILY                        : 0x4, // 4
  FIELD_ATTRIBUTE_FAM_OR_ASSEM                  : 0x5, // 5
  FIELD_ATTRIBUTE_PUBLIC                        : 0x6, // 6
  FIELD_ATTRIBUTE_FIELD_ACCESS_MASK             : 0x7, // 7
  FIELD_ATTRIBUTE_STATIC                        : 0x10, // 16
  FIELD_ATTRIBUTE_INIT_ONLY                     : 0x20, // 32
  FIELD_ATTRIBUTE_LITERAL                       : 0x40, // 64
  FIELD_ATTRIBUTE_NOT_SERIALIZED                : 0x80, // 128
  FIELD_ATTRIBUTE_HAS_FIELD_RVA                 : 0x100, // 256
  FIELD_ATTRIBUTE_SPECIAL_NAME                  : 0x200, // 512
  FIELD_ATTRIBUTE_RT_SPECIAL_NAME               : 0x400, // 1024
  FIELD_ATTRIBUTE_HAS_FIELD_MARSHAL             : 0x1000, // 4096
  FIELD_ATTRIBUTE_PINVOKE_IMPL                  : 0x2000, // 8192
  FIELD_ATTRIBUTE_HAS_DEFAULT                   : 0x8000, // 32768
  FIELD_ATTRIBUTE_RESERVED_MASK                 : 0x9500, // 38144
  FILE_CONTAINS_METADATA                        : 0x0, // 0
  FILE_CONTAINS_NO_METADATA                     : 0x1, // 1
  MANIFEST_RESOURCE_PUBLIC                      : 0x1, // 1
  MANIFEST_RESOURCE_PRIVATE                     : 0x2, // 2
  MANIFEST_RESOURCE_VISIBILITY_MASK             : 0x7, // 7
  METHOD_ATTRIBUTE_COMPILER_CONTROLLED          : 0x0, // 0
  METHOD_ATTRIBUTE_REUSE_SLOT                   : 0x0, // 0
  METHOD_IMPL_ATTRIBUTE_IL                      : 0x0, // 0
  METHOD_IMPL_ATTRIBUTE_MANAGED                 : 0x0, // 0
  METHOD_ATTRIBUTE_PRIVATE                      : 0x1, // 1
  METHOD_IMPL_ATTRIBUTE_NATIVE                  : 0x1, // 1
  METHOD_SEMANTIC_SETTER                        : 0x1, // 1
  METHOD_ATTRIBUTE_FAM_AND_ASSEM                : 0x2, // 2
  METHOD_IMPL_ATTRIBUTE_OPTIL                   : 0x2, // 2
  METHOD_SEMANTIC_GETTER                        : 0x2, // 2
  METHOD_ATTRIBUTE_ASSEM                        : 0x3, // 3
  METHOD_IMPL_ATTRIBUTE_CODE_TYPE_MASK          : 0x3, // 3
  METHOD_IMPL_ATTRIBUTE_RUNTIME                 : 0x3, // 3
  METHOD_ATTRIBUTE_FAMILY                       : 0x4, // 4
  METHOD_IMPL_ATTRIBUTE_MANAGED_MASK            : 0x4, // 4
  METHOD_IMPL_ATTRIBUTE_UNMANAGED               : 0x4, // 4
  METHOD_SEMANTIC_OTHER                         : 0x4, // 4
  METHOD_ATTRIBUTE_FAM_OR_ASSEM                 : 0x5, // 5
  METHOD_ATTRIBUTE_PUBLIC                       : 0x6, // 6
  METHOD_ATTRIBUTE_MEMBER_ACCESS_MASK           : 0x7, // 7
  METHOD_ATTRIBUTE_UNMANAGED_EXPORT             : 0x8, // 8
  METHOD_IMPL_ATTRIBUTE_NOINLINING              : 0x8, // 8
  METHOD_SEMANTIC_ADD_ON                        : 0x8, // 8
  METHOD_ATTRIBUTE_STATIC                       : 0x10, // 16
  METHOD_IMPL_ATTRIBUTE_FORWARD_REF             : 0x10, // 16
  METHOD_SEMANTIC_REMOVE_ON                     : 0x10, // 16
  METHOD_ATTRIBUTE_FINAL                        : 0x20, // 32
  METHOD_IMPL_ATTRIBUTE_SYNCHRONIZED            : 0x20, // 32
  METHOD_SEMANTIC_FIRE                          : 0x20, // 32
  METHOD_ATTRIBUTE_VIRTUAL                      : 0x40, // 64
  METHOD_IMPL_ATTRIBUTE_NOOPTIMIZATION          : 0x40, // 64
  METHOD_ATTRIBUTE_HIDE_BY_SIG                  : 0x80, // 128
  METHOD_IMPL_ATTRIBUTE_PRESERVE_SIG            : 0x80, // 128
  METHOD_ATTRIBUTE_NEW_SLOT                     : 0x100, // 256
  METHOD_ATTRIBUTE_VTABLE_LAYOUT_MASK           : 0x100, // 256
  METHOD_IMPL_ATTRIBUTE_AGGRESSIVE_INLINING     : 0x100, // 256
  METHOD_ATTRIBUTE_STRICT                       : 0x200, // 512
  METHOD_ATTRIBUTE_ABSTRACT                     : 0x400, // 1024
  METHOD_ATTRIBUTE_SPECIAL_NAME                 : 0x800, // 2048
  METHOD_ATTRIBUTE_RT_SPECIAL_NAME              : 0x1000, // 4096
  METHOD_IMPL_ATTRIBUTE_INTERNAL_CALL           : 0x1000, // 4096
  METHOD_ATTRIBUTE_PINVOKE_IMPL                 : 0x2000, // 8192
  METHOD_ATTRIBUTE_HAS_SECURITY                 : 0x4000, // 16384
  METHOD_ATTRIBUTE_REQUIRE_SEC_OBJECT           : 0x8000, // 32768
  METHOD_ATTRIBUTE_RESERVED_MASK                : 0xd000, // 53248
  METHOD_IMPL_ATTRIBUTE_MAX_METHOD_IMPL_VAL     : 0xffff, // 65535
  PARAM_ATTRIBUTE_IN                            : 0x1, // 1
  PARAM_ATTRIBUTE_OUT                           : 0x2, // 2
  PARAM_ATTRIBUTE_OPTIONAL                      : 0x10, // 16
  PARAM_ATTRIBUTE_HAS_DEFAULT                   : 0x1000, // 4096
  PARAM_ATTRIBUTE_HAS_FIELD_MARSHAL             : 0x2000, // 8192
  PARAM_ATTRIBUTE_UNUSED                        : 0xcfe0, // 53216
  PARAM_ATTRIBUTE_RESERVED_MASK                 : 0xf000, // 61440
  PINVOKE_ATTRIBUTE_CHAR_SET_NOT_SPEC           : 0x0, // 0
  PINVOKE_ATTRIBUTE_NO_MANGLE                   : 0x1, // 1
  PINVOKE_ATTRIBUTE_CHAR_SET_ANSI               : 0x2, // 2
  PINVOKE_ATTRIBUTE_CHAR_SET_UNICODE            : 0x4, // 4
  PINVOKE_ATTRIBUTE_CHAR_SET_AUTO               : 0x6, // 6
  PINVOKE_ATTRIBUTE_CHAR_SET_MASK               : 0x6, // 6
  PINVOKE_ATTRIBUTE_CALL_CONV_GENERICINST       : 0xa, // 10
  PINVOKE_ATTRIBUTE_BEST_FIT_ENABLED            : 0x10, // 16
  PINVOKE_ATTRIBUTE_CALL_CONV_GENERIC           : 0x10, // 16
  PINVOKE_ATTRIBUTE_BEST_FIT_DISABLED           : 0x20, // 32
  PINVOKE_ATTRIBUTE_BEST_FIT_MASK               : 0x30, // 48
  PINVOKE_ATTRIBUTE_SUPPORTS_LAST_ERROR         : 0x40, // 64
  PINVOKE_ATTRIBUTE_CALL_CONV_WINAPI            : 0x100, // 256
  PINVOKE_ATTRIBUTE_CALL_CONV_CDECL             : 0x200, // 512
  PINVOKE_ATTRIBUTE_CALL_CONV_STDCALL           : 0x300, // 768
  PINVOKE_ATTRIBUTE_CALL_CONV_THISCALL          : 0x400, // 1024
  PINVOKE_ATTRIBUTE_CALL_CONV_FASTCALL          : 0x500, // 1280
  PINVOKE_ATTRIBUTE_CALL_CONV_MASK              : 0x700, // 1792
  PINVOKE_ATTRIBUTE_THROW_ON_UNMAPPABLE_ENABLED : 0x1000, // 4096
  PINVOKE_ATTRIBUTE_THROW_ON_UNMAPPABLE_DISABLED: 0x2000, // 8192
  PINVOKE_ATTRIBUTE_THROW_ON_UNMAPPABLE_MASK    : 0x3000, // 12288
  PROPERTY_ATTRIBUTE_SPECIAL_NAME               : 0x200, // 512
  PROPERTY_ATTRIBUTE_RT_SPECIAL_NAME            : 0x400, // 1024
  PROPERTY_ATTRIBUTE_HAS_DEFAULT                : 0x1000, // 4096
  PROPERTY_ATTRIBUTE_UNUSED                     : 0xe9ff, // 59903
  PROPERTY_ATTRIBUTE_RESERVED_MASK              : 0xf400, // 62464
  SECURITY_ACTION_DEMAND                        : 0x2, // 2
  SECURITY_ACTION_ASSERT                        : 0x3, // 3
  SECURITY_ACTION_DENY                          : 0x4, // 4
  SECURITY_ACTION_PERMITONLY                    : 0x5, // 5
  SECURITY_ACTION_LINKDEMAND                    : 0x6, // 6
  SECURITY_ACTION_INHERITDEMAND                 : 0x7, // 7
  SECURITY_ACTION_REQMIN                        : 0x8, // 8
  SECURITY_ACTION_REQOPT                        : 0x9, // 9
  SECURITY_ACTION_REQREFUSE                     : 0xa, // 10
  SECURITY_ACTION_NONCASDEMAND                  : 0xd, // 13
  SECURITY_ACTION_NONCASLINKDEMAND              : 0xe, // 14
  SECURITY_ACTION_NONCASINHERITANCE             : 0xf, // 15
  SECURITY_ACTION_LINKDEMANDCHOICE              : 0x10, // 16
  SECURITY_ACTION_INHERITDEMANDCHOICE           : 0x11, // 17
  SECURITY_ACTION_DEMANDCHOICE                  : 0x12, // 18
  TYPE_ATTRIBUTE_ANSI_CLASS                     : 0x0, // 0
  TYPE_ATTRIBUTE_AUTO_LAYOUT                    : 0x0, // 0
  TYPE_ATTRIBUTE_CLASS                          : 0x0, // 0
  TYPE_ATTRIBUTE_NOT_PUBLIC                     : 0x0, // 0
  TYPE_ATTRIBUTE_PUBLIC                         : 0x1, // 1
  TYPE_ATTRIBUTE_NESTED_PUBLIC                  : 0x2, // 2
  TYPE_ATTRIBUTE_NESTED_PRIVATE                 : 0x3, // 3
  TYPE_ATTRIBUTE_NESTED_FAMILY                  : 0x4, // 4
  TYPE_ATTRIBUTE_NESTED_ASSEMBLY                : 0x5, // 5
  TYPE_ATTRIBUTE_NESTED_FAM_AND_ASSEM           : 0x6, // 6
  TYPE_ATTRIBUTE_NESTED_FAM_OR_ASSEM            : 0x7, // 7
  TYPE_ATTRIBUTE_VISIBILITY_MASK                : 0x7, // 7
  TYPE_ATTRIBUTE_SEQUENTIAL_LAYOUT              : 0x8, // 8
  TYPE_ATTRIBUTE_EXPLICIT_LAYOUT                : 0x10, // 16
  TYPE_ATTRIBUTE_LAYOUT_MASK                    : 0x18, // 24
  TYPE_ATTRIBUTE_CLASS_SEMANTIC_MASK            : 0x20, // 32
  TYPE_ATTRIBUTE_INTERFACE                      : 0x20, // 32
  TYPE_ATTRIBUTE_ABSTRACT                       : 0x80, // 128
  TYPE_ATTRIBUTE_SEALED                         : 0x100, // 256
  TYPE_ATTRIBUTE_SPECIAL_NAME                   : 0x400, // 1024
  TYPE_ATTRIBUTE_RT_SPECIAL_NAME                : 0x800, // 2048
  TYPE_ATTRIBUTE_IMPORT                         : 0x1000, // 4096
  TYPE_ATTRIBUTE_SERIALIZABLE                   : 0x2000, // 8192
  TYPE_ATTRIBUTE_UNICODE_CLASS                  : 0x10000, // 65536
  TYPE_ATTRIBUTE_AUTO_CLASS                     : 0x20000, // 131072
  TYPE_ATTRIBUTE_STRING_FORMAT_MASK             : 0x30000, // 196608
  TYPE_ATTRIBUTE_HAS_SECURITY                   : 0x40000, // 262144
  TYPE_ATTRIBUTE_RESERVED_MASK                  : 0x40800, // 264192
  TYPE_ATTRIBUTE_BEFORE_FIELD_INIT              : 0x100000, // 1048576
  TYPE_ATTRIBUTE_FORWARDER                      : 0x200000, // 2097152
// cil-coff.h
  CLI_FLAGS_ILONLY                            : 0x1, // 1
  CLI_FLAGS_32BITREQUIRED                     : 0x2, // 2
  CLI_FLAGS_STRONGNAMESIGNED                  : 0x8, // 8
  CLI_FLAGS_TRACKDEBUGDATA                    : 0x10000, // 65536
  COFF_ATTRIBUTE_EXECUTABLE_IMAGE             : 0x2, // 2
  COFF_ATTRIBUTE_LIBRARY_IMAGE                : 0x2000, // 8192
  METHOD_HEADER_SECTION_RESERVED              : 0x0, // 0
  METHOD_HEADER_SECTION_EHTABLE               : 0x1, // 1
  METHOD_HEADER_SECTION_OPTIL_TABLE           : 0x2, // 2
  METHOD_HEADER_TINY_FORMAT                   : 0x2, // 2
  METHOD_HEADER_FAT_FORMAT                    : 0x3, // 3
  METHOD_HEADER_FORMAT_MASK                   : 0x3, // 3
  METHOD_HEADER_MORE_SECTS                    : 0x8, // 8
  METHOD_HEADER_INIT_LOCALS                   : 0x10, // 16
  METHOD_HEADER_SECTION_FAT_FORMAT            : 0x40, // 64
  METHOD_HEADER_SECTION_MORE_SECTS            : 0x80, // 128
  PE_RESOURCE_ID_CURSOR                       : 0x1, // 1
  PE_RESOURCE_ID_BITMAP                       : 0x2, // 2
  PE_RESOURCE_ID_ICON                         : 0x3, // 3
  PE_RESOURCE_ID_MENU                         : 0x4, // 4
  PE_RESOURCE_ID_DIALOG                       : 0x5, // 5
  PE_RESOURCE_ID_STRING                       : 0x6, // 6
  PE_RESOURCE_ID_FONTDIR                      : 0x7, // 7
  PE_RESOURCE_ID_FONT                         : 0x8, // 8
  PE_RESOURCE_ID_ACCEL                        : 0x9, // 9
  PE_RESOURCE_ID_RCDATA                       : 0xa, // 10
  PE_RESOURCE_ID_MESSAGETABLE                 : 0xb, // 11
  PE_RESOURCE_ID_GROUP_CURSOR                 : 0xc, // 12
  PE_RESOURCE_ID_GROUP_ICON                   : 0xd, // 13
  PE_RESOURCE_ID_VERSION                      : 0x10, // 16
  PE_RESOURCE_ID_DLGINCLUDE                   : 0x11, // 17
  PE_RESOURCE_ID_PLUGPLAY                     : 0x13, // 19
  PE_RESOURCE_ID_VXD                          : 0x14, // 20
  PE_RESOURCE_ID_ANICURSOR                    : 0x15, // 21
  PE_RESOURCE_ID_ANIICON                      : 0x16, // 22
  PE_RESOURCE_ID_HTML                         : 0x17, // 23
  PE_RESOURCE_ID_ASPNET_STRING                : 0x65, // 101
  SECT_FLAGS_HAS_CODE                         : 0x20, // 32
  SECT_FLAGS_HAS_INITIALIZED_DATA             : 0x40, // 64
  SECT_FLAGS_HAS_UNINITIALIZED_DATA           : 0x80, // 128
  SECT_FLAGS_MEM_DISCARDABLE                  : 0x2000000, // 33554432
  SECT_FLAGS_MEM_NOT_CACHED                   : 0x4000000, // 67108864
  SECT_FLAGS_MEM_NOT_PAGED                    : 0x8000000, // 134217728
  SECT_FLAGS_MEM_SHARED                       : 0x10000000, // 268435456
  SECT_FLAGS_MEM_EXECUTE                      : 0x20000000, // 536870912
  SECT_FLAGS_MEM_READ                         : 0x40000000, // 1073741824
  SECT_FLAGS_MEM_WRITE                        : 0x80000000, // 2147483648
  VTFIXUP_TYPE_32BIT                          : 0x1, // 1
  VTFIXUP_TYPE_64BIT                          : 0x2, // 2
  VTFIXUP_TYPE_FROM_UNMANAGED                 : 0x4, // 4
  VTFIXUP_TYPE_FROM_UNMANAGED_RETAIN_APPDOMAIN: 0x8, // 8
  VTFIXUP_TYPE_CALL_MOST_DERIVED              : 0x10, // 16
// wrapper_types.h
  WRAPPER_NONE                      : 0x0, // 0
  WRAPPER_DELEGATE_INVOKE           : 0x1, // 1
  WRAPPER_DELEGATE_BEGIN_INVOKE     : 0x2, // 2
  WRAPPER_DELEGATE_END_INVOKE       : 0x3, // 3
  WRAPPER_RUNTIME_INVOKE            : 0x4, // 4
  WRAPPER_NATIVE_TO_MANAGED         : 0x5, // 5
  WRAPPER_MANAGED_TO_NATIVE         : 0x6, // 6
  WRAPPER_MANAGED_TO_MANAGED        : 0x7, // 7
  WRAPPER_REMOTING_INVOKE           : 0x8, // 8
  WRAPPER_REMOTING_INVOKE_WITH_CHECK: 0x9, // 9
  WRAPPER_XDOMAIN_INVOKE            : 0xa, // 10
  WRAPPER_XDOMAIN_DISPATCH          : 0xb, // 11
  WRAPPER_LDFLD                     : 0xc, // 12
  WRAPPER_STFLD                     : 0xd, // 13
  WRAPPER_LDFLD_REMOTE              : 0xe, // 14
  WRAPPER_STFLD_REMOTE              : 0xf, // 15
  WRAPPER_SYNCHRONIZED              : 0x10, // 16
  WRAPPER_DYNAMIC_METHOD            : 0x11, // 17
  WRAPPER_ISINST                    : 0x12, // 18
  WRAPPER_CASTCLASS                 : 0x13, // 19
  WRAPPER_PROXY_ISINST              : 0x14, // 20
  WRAPPER_STELEMREF                 : 0x15, // 21
  WRAPPER_UNBOX                     : 0x16, // 22
  WRAPPER_LDFLDA                    : 0x17, // 23
  WRAPPER_WRITE_BARRIER             : 0x18, // 24
  WRAPPER_UNKNOWN                   : 0x19, // 25
  WRAPPER_COMINTEROP_INVOKE         : 0x1a, // 26
  WRAPPER_COMINTEROP                : 0x1b, // 27
  WRAPPER_ALLOC                     : 0x1c, // 28
// opcodes.h
  CEE_ARGLIST            : 0x0, // 0
  CEE_ENDMAC             : 0x0, // 0
  CEE_ILLEGAL            : 0x0, // 0
  CEE_MONO_ICALL         : 0x0, // 0
  CEE_NOP                : 0x0, // 0
  CEE_BREAK              : 0x1, // 1
  CEE_CEQ                : 0x1, // 1
  CEE_MONO_OBJADDR       : 0x1, // 1
  CEE_CGT                : 0x2, // 2
  CEE_LDARG_0            : 0x2, // 2
  CEE_MONO_LDPTR         : 0x2, // 2
  CEE_CGT_UN             : 0x3, // 3
  CEE_LDARG_1            : 0x3, // 3
  CEE_MONO_VTADDR        : 0x3, // 3
  CEE_CLT                : 0x4, // 4
  CEE_LDARG_2            : 0x4, // 4
  CEE_MONO_NEWOBJ        : 0x4, // 4
  CEE_CLT_UN             : 0x5, // 5
  CEE_LDARG_3            : 0x5, // 5
  CEE_MONO_RETOBJ        : 0x5, // 5
  CEE_LDFTN              : 0x6, // 6
  CEE_LDLOC_0            : 0x6, // 6
  CEE_MONO_LDNATIVEOBJ   : 0x6, // 6
  CEE_LDLOC_1            : 0x7, // 7
  CEE_LDVIRTFTN          : 0x7, // 7
  CEE_MONO_CISINST       : 0x7, // 7
  CEE_LDLOC_2            : 0x8, // 8
  CEE_MONO_CCASTCLASS    : 0x8, // 8
  CEE_UNUSED56           : 0x8, // 8
  CEE_LDARG              : 0x9, // 9
  CEE_LDLOC_3            : 0x9, // 9
  CEE_MONO_SAVE_LMF      : 0x9, // 9
  CEE_LDARGA             : 0xa, // 10
  CEE_MONO_RESTORE_LMF   : 0xa, // 10
  CEE_STLOC_0            : 0xa, // 10
  CEE_MONO_CLASSCONST    : 0xb, // 11
  CEE_STARG              : 0xb, // 11
  CEE_STLOC_1            : 0xb, // 11
  CEE_LDLOC              : 0xc, // 12
  CEE_MONO_NOT_TAKEN     : 0xc, // 12
  CEE_STLOC_2            : 0xc, // 12
  CEE_LDLOCA             : 0xd, // 13
  CEE_MONO_TLS           : 0xd, // 13
  CEE_STLOC_3            : 0xd, // 13
  CEE_LDARG_S            : 0xe, // 14
  CEE_MONO_ICALL_ADDR    : 0xe, // 14
  CEE_STLOC              : 0xe, // 14
  CEE_LDARGA_S           : 0xf, // 15
  CEE_LOCALLOC           : 0xf, // 15
  CEE_MONO_DYN_CALL      : 0xf, // 15
  CEE_MONO_MEMORY_BARRIER: 0x10, // 16
  CEE_STARG_S            : 0x10, // 16
  CEE_UNUSED57           : 0x10, // 16
  CEE_ENDFILTER          : 0x11, // 17
  CEE_LDLOC_S            : 0x11, // 17
  CEE_LDLOCA_S           : 0x12, // 18
  CEE_UNALIGNED_         : 0x12, // 18
  CEE_STLOC_S            : 0x13, // 19
  CEE_VOLATILE_          : 0x13, // 19
  CEE_LDNULL             : 0x14, // 20
  CEE_TAIL_              : 0x14, // 20
  CEE_INITOBJ            : 0x15, // 21
  CEE_LDC_I4_M1          : 0x15, // 21
  CEE_CONSTRAINED_       : 0x16, // 22
  CEE_LDC_I4_0           : 0x16, // 22
  CEE_CPBLK              : 0x17, // 23
  CEE_LDC_I4_1           : 0x17, // 23
  CEE_INITBLK            : 0x18, // 24
  CEE_LDC_I4_2           : 0x18, // 24
  CEE_LDC_I4_3           : 0x19, // 25
  CEE_NO_                : 0x19, // 25
  CEE_LDC_I4_4           : 0x1a, // 26
  CEE_RETHROW            : 0x1a, // 26
  CEE_LDC_I4_5           : 0x1b, // 27
  CEE_UNUSED             : 0x1b, // 27
  CEE_LDC_I4_6           : 0x1c, // 28
  CEE_SIZEOF             : 0x1c, // 28
  CEE_LDC_I4_7           : 0x1d, // 29
  CEE_REFANYTYPE         : 0x1d, // 29
  CEE_LDC_I4_8           : 0x1e, // 30
  CEE_READONLY_          : 0x1e, // 30
  CEE_LDC_I4_S           : 0x1f, // 31
  CEE_UNUSED53           : 0x1f, // 31
  CEE_LDC_I4             : 0x20, // 32
  CEE_UNUSED54           : 0x20, // 32
  CEE_LDC_I8             : 0x21, // 33
  CEE_UNUSED55           : 0x21, // 33
  CEE_LDC_R4             : 0x22, // 34
  CEE_UNUSED70           : 0x22, // 34
  CEE_LDC_R8             : 0x23, // 35
  CEE_UNUSED99           : 0x24, // 36
  CEE_DUP                : 0x25, // 37
  CEE_POP                : 0x26, // 38
  CEE_JMP                : 0x27, // 39
  CEE_CALL               : 0x28, // 40
  CEE_CALLI              : 0x29, // 41
  CEE_RET                : 0x2a, // 42
  CEE_BR_S               : 0x2b, // 43
  CEE_BRFALSE_S          : 0x2c, // 44
  CEE_BRTRUE_S           : 0x2d, // 45
  CEE_BEQ_S              : 0x2e, // 46
  CEE_BGE_S              : 0x2f, // 47
  CEE_BGT_S              : 0x30, // 48
  CEE_BLE_S              : 0x31, // 49
  CEE_BLT_S              : 0x32, // 50
  CEE_BNE_UN_S           : 0x33, // 51
  CEE_BGE_UN_S           : 0x34, // 52
  CEE_BGT_UN_S           : 0x35, // 53
  CEE_BLE_UN_S           : 0x36, // 54
  CEE_BLT_UN_S           : 0x37, // 55
  CEE_BR                 : 0x38, // 56
  CEE_BRFALSE            : 0x39, // 57
  CEE_BRTRUE             : 0x3a, // 58
  CEE_BEQ                : 0x3b, // 59
  CEE_BGE                : 0x3c, // 60
  CEE_BGT                : 0x3d, // 61
  CEE_BLE                : 0x3e, // 62
  CEE_BLT                : 0x3f, // 63
  CEE_BNE_UN             : 0x40, // 64
  CEE_BGE_UN             : 0x41, // 65
  CEE_BGT_UN             : 0x42, // 66
  CEE_BLE_UN             : 0x43, // 67
  CEE_BLT_UN             : 0x44, // 68
  CEE_SWITCH             : 0x45, // 69
  CEE_LDIND_I1           : 0x46, // 70
  CEE_LDIND_U1           : 0x47, // 71
  CEE_LDIND_I2           : 0x48, // 72
  CEE_LDIND_U2           : 0x49, // 73
  CEE_LDIND_I4           : 0x4a, // 74
  CEE_LDIND_U4           : 0x4b, // 75
  CEE_LDIND_I8           : 0x4c, // 76
  CEE_LDIND_I            : 0x4d, // 77
  CEE_LDIND_R4           : 0x4e, // 78
  CEE_LDIND_R8           : 0x4f, // 79
  CEE_LDIND_REF          : 0x50, // 80
  CEE_STIND_REF          : 0x51, // 81
  CEE_STIND_I1           : 0x52, // 82
  CEE_STIND_I2           : 0x53, // 83
  CEE_STIND_I4           : 0x54, // 84
  CEE_STIND_I8           : 0x55, // 85
  CEE_STIND_R4           : 0x56, // 86
  CEE_STIND_R8           : 0x57, // 87
  CEE_ADD                : 0x58, // 88
  CEE_SUB                : 0x59, // 89
  CEE_MUL                : 0x5a, // 90
  CEE_DIV                : 0x5b, // 91
  CEE_DIV_UN             : 0x5c, // 92
  CEE_REM                : 0x5d, // 93
  CEE_REM_UN             : 0x5e, // 94
  CEE_AND                : 0x5f, // 95
  CEE_OR                 : 0x60, // 96
  CEE_XOR                : 0x61, // 97
  CEE_SHL                : 0x62, // 98
  CEE_SHR                : 0x63, // 99
  CEE_SHR_UN             : 0x64, // 100
  CEE_NEG                : 0x65, // 101
  CEE_NOT                : 0x66, // 102
  CEE_CONV_I1            : 0x67, // 103
  CEE_CONV_I2            : 0x68, // 104
  CEE_CONV_I4            : 0x69, // 105
  CEE_CONV_I8            : 0x6a, // 106
  CEE_CONV_R4            : 0x6b, // 107
  CEE_CONV_R8            : 0x6c, // 108
  CEE_CONV_U4            : 0x6d, // 109
  CEE_CONV_U8            : 0x6e, // 110
  CEE_CALLVIRT           : 0x6f, // 111
  CEE_CPOBJ              : 0x70, // 112
  CEE_LDOBJ              : 0x71, // 113
  CEE_LDSTR              : 0x72, // 114
  CEE_NEWOBJ             : 0x73, // 115
  CEE_CASTCLASS          : 0x74, // 116
  CEE_ISINST             : 0x75, // 117
  CEE_CONV_R_UN          : 0x76, // 118
  CEE_UNUSED58           : 0x77, // 119
  CEE_UNUSED1            : 0x78, // 120
  CEE_UNBOX              : 0x79, // 121
  CEE_THROW              : 0x7a, // 122
  CEE_LDFLD              : 0x7b, // 123
  CEE_LDFLDA             : 0x7c, // 124
  CEE_STFLD              : 0x7d, // 125
  CEE_LDSFLD             : 0x7e, // 126
  CEE_LDSFLDA            : 0x7f, // 127
  CEE_STSFLD             : 0x80, // 128
  CEE_STOBJ              : 0x81, // 129
  CEE_CONV_OVF_I1_UN     : 0x82, // 130
  CEE_CONV_OVF_I2_UN     : 0x83, // 131
  CEE_CONV_OVF_I4_UN     : 0x84, // 132
  CEE_CONV_OVF_I8_UN     : 0x85, // 133
  CEE_CONV_OVF_U1_UN     : 0x86, // 134
  CEE_CONV_OVF_U2_UN     : 0x87, // 135
  CEE_CONV_OVF_U4_UN     : 0x88, // 136
  CEE_CONV_OVF_U8_UN     : 0x89, // 137
  CEE_CONV_OVF_I_UN      : 0x8a, // 138
  CEE_CONV_OVF_U_UN      : 0x8b, // 139
  CEE_BOX                : 0x8c, // 140
  CEE_NEWARR             : 0x8d, // 141
  CEE_LDLEN              : 0x8e, // 142
  CEE_LDELEMA            : 0x8f, // 143
  CEE_LDELEM_I1          : 0x90, // 144
  CEE_LDELEM_U1          : 0x91, // 145
  CEE_LDELEM_I2          : 0x92, // 146
  CEE_LDELEM_U2          : 0x93, // 147
  CEE_LDELEM_I4          : 0x94, // 148
  CEE_LDELEM_U4          : 0x95, // 149
  CEE_LDELEM_I8          : 0x96, // 150
  CEE_LDELEM_I           : 0x97, // 151
  CEE_LDELEM_R4          : 0x98, // 152
  CEE_LDELEM_R8          : 0x99, // 153
  CEE_LDELEM_REF         : 0x9a, // 154
  CEE_STELEM_I           : 0x9b, // 155
  CEE_STELEM_I1          : 0x9c, // 156
  CEE_STELEM_I2          : 0x9d, // 157
  CEE_STELEM_I4          : 0x9e, // 158
  CEE_STELEM_I8          : 0x9f, // 159
  CEE_STELEM_R4          : 0xa0, // 160
  CEE_STELEM_R8          : 0xa1, // 161
  CEE_STELEM_REF         : 0xa2, // 162
  CEE_LDELEM             : 0xa3, // 163
  CEE_STELEM             : 0xa4, // 164
  CEE_UNBOX_ANY          : 0xa5, // 165
  CEE_UNUSED5            : 0xa6, // 166
  CEE_UNUSED6            : 0xa7, // 167
  CEE_UNUSED7            : 0xa8, // 168
  CEE_UNUSED8            : 0xa9, // 169
  CEE_UNUSED9            : 0xaa, // 170
  CEE_UNUSED10           : 0xab, // 171
  CEE_UNUSED11           : 0xac, // 172
  CEE_UNUSED12           : 0xad, // 173
  CEE_UNUSED13           : 0xae, // 174
  CEE_UNUSED14           : 0xaf, // 175
  CEE_UNUSED15           : 0xb0, // 176
  CEE_UNUSED16           : 0xb1, // 177
  CEE_UNUSED17           : 0xb2, // 178
  CEE_CONV_OVF_I1        : 0xb3, // 179
  CEE_CONV_OVF_U1        : 0xb4, // 180
  CEE_CONV_OVF_I2        : 0xb5, // 181
  CEE_CONV_OVF_U2        : 0xb6, // 182
  CEE_CONV_OVF_I4        : 0xb7, // 183
  CEE_CONV_OVF_U4        : 0xb8, // 184
  CEE_CONV_OVF_I8        : 0xb9, // 185
  CEE_CONV_OVF_U8        : 0xba, // 186
  CEE_UNUSED50           : 0xbb, // 187
  CEE_UNUSED18           : 0xbc, // 188
  CEE_UNUSED19           : 0xbd, // 189
  CEE_UNUSED20           : 0xbe, // 190
  CEE_UNUSED21           : 0xbf, // 191
  CEE_UNUSED22           : 0xc0, // 192
  CEE_UNUSED23           : 0xc1, // 193
  CEE_REFANYVAL          : 0xc2, // 194
  CEE_CKFINITE           : 0xc3, // 195
  CEE_UNUSED24           : 0xc4, // 196
  CEE_UNUSED25           : 0xc5, // 197
  CEE_MKREFANY           : 0xc6, // 198
  CEE_UNUSED59           : 0xc7, // 199
  CEE_UNUSED60           : 0xc8, // 200
  CEE_UNUSED61           : 0xc9, // 201
  CEE_UNUSED62           : 0xca, // 202
  CEE_UNUSED63           : 0xcb, // 203
  CEE_UNUSED64           : 0xcc, // 204
  CEE_UNUSED65           : 0xcd, // 205
  CEE_UNUSED66           : 0xce, // 206
  CEE_UNUSED67           : 0xcf, // 207
  CEE_LDTOKEN            : 0xd0, // 208
  CEE_CONV_U2            : 0xd1, // 209
  CEE_CONV_U1            : 0xd2, // 210
  CEE_CONV_I             : 0xd3, // 211
  CEE_CONV_OVF_I         : 0xd4, // 212
  CEE_CONV_OVF_U         : 0xd5, // 213
  CEE_ADD_OVF            : 0xd6, // 214
  CEE_ADD_OVF_UN         : 0xd7, // 215
  CEE_MUL_OVF            : 0xd8, // 216
  CEE_MUL_OVF_UN         : 0xd9, // 217
  CEE_SUB_OVF            : 0xda, // 218
  CEE_SUB_OVF_UN         : 0xdb, // 219
  CEE_ENDFINALLY         : 0xdc, // 220
  CEE_LEAVE              : 0xdd, // 221
  CEE_LEAVE_S            : 0xde, // 222
  CEE_STIND_I            : 0xdf, // 223
  CEE_CONV_U             : 0xe0, // 224
  CEE_UNUSED26           : 0xe1, // 225
  CEE_UNUSED27           : 0xe2, // 226
  CEE_UNUSED28           : 0xe3, // 227
  CEE_UNUSED29           : 0xe4, // 228
  CEE_UNUSED30           : 0xe5, // 229
  CEE_UNUSED31           : 0xe6, // 230
  CEE_UNUSED32           : 0xe7, // 231
  CEE_UNUSED33           : 0xe8, // 232
  CEE_UNUSED34           : 0xe9, // 233
  CEE_UNUSED35           : 0xea, // 234
  CEE_UNUSED36           : 0xeb, // 235
  CEE_UNUSED37           : 0xec, // 236
  CEE_UNUSED38           : 0xed, // 237
  CEE_UNUSED39           : 0xee, // 238
  CEE_UNUSED40           : 0xef, // 239
  CEE_UNUSED41           : 0xf0, // 240
  CEE_UNUSED42           : 0xf1, // 241
  CEE_UNUSED43           : 0xf2, // 242
  CEE_UNUSED44           : 0xf3, // 243
  CEE_UNUSED45           : 0xf4, // 244
  CEE_UNUSED46           : 0xf5, // 245
  CEE_UNUSED47           : 0xf6, // 246
  CEE_UNUSED48           : 0xf7, // 247
  CEE_PREFIX7            : 0xf8, // 248
  CEE_PREFIX6            : 0xf9, // 249
  CEE_PREFIX5            : 0xfa, // 250
  CEE_PREFIX4            : 0xfb, // 251
  CEE_PREFIX3            : 0xfc, // 252
  CEE_PREFIX2            : 0xfd, // 253
  CEE_PREFIX1            : 0xfe, // 254
  CEE_PREFIXREF          : 0xff, // 255
  CUSTOM_PREFIX          : 0xf0, // 240
  FLOW_NEXT              : 0x0, // 0
  FLOW_BRANCH            : 0x1, // 1
  FLOW_COND_BRANCH       : 0x2, // 2
  FLOW_ERROR             : 0x3, // 3
  FLOW_CALL              : 0x4, // 4
  FLOW_RETURN            : 0x5, // 5
  FLOW_META              : 0x6, // 6
  InlineBrTarget         : 0x9, // 9
  InlineField            : 0x2, // 2
  InlineI                : 0xe, // 14
  InlineI8               : 0x10, // 16
  InlineMethod           : 0x3, // 3
  InlineNone             : 0x0, // 0
  InlineR                : 0xc, // 12
  InlineSig              : 0x6, // 6
  InlineString           : 0x5, // 5
  InlineSwitch           : 0xb, // 11
  InlineTok              : 0x4, // 4
  InlineType             : 0x1, // 1
  InlineVar              : 0x7, // 7
  ShortInlineBrTarget    : 0xa, // 10
  ShortInlineI           : 0xf, // 15
  ShortInlineR           : 0xd, // 13
  ShortInlineVar         : 0x8, // 8
}; // end of constants

/** @enum {int} */
var MetaType = {
  UINT32    : 1,
  UINT16    : 2,
  UINT8     : 3,
  BLOB_IDX  : 4,
  STRING_IDX: 5,
  GUID_IDX  : 6,
  TABLE_IDX : 7,
  CONST_IDX : 8,
  HASCAT_IDX: 9,
  CAT_IDX   : 10,
  HASDEC_IDX: 11,
  IMPL_IDX  : 12,
  HFM_IDX   : 13,
  MF_IDX    : 14,
  TDOR_IDX  : 15,
  MRP_IDX   : 16,
  MDOR_IDX  : 17,
  HS_IDX    : 18,
  RS_IDX    : 19,
}; // end of enum MetaType

/** @const {Array} */
var TableSchema = [
  { // TABLE_MODULE
    name: "Module",
    fields: [
      "Generation",
      "Name",
      "MVID",
      "EncID",
      "EncBaseID",
    ],
    field_type: [
      MetaType.UINT16,
      MetaType.STRING_IDX,
      MetaType.GUID_IDX,
      MetaType.GUID_IDX,
      MetaType.GUID_IDX,
    ],
  },
  { // TABLE_TYPEREF
    name: "TypeRef",
    fields: [
      "ResolutionScope=ResolutionScope",
      "Name",
      "Namespace",
    ],
    field_type: [
      MetaType.RS_IDX,
      MetaType.STRING_IDX,
      MetaType.STRING_IDX,
    ],
  },
  { // TABLE_TYPEDEF
    name: "TypeDef",
    fields: [
      "Flags",
      "Name",
      "Namespace",
      "Extends",
      "FieldList:Field",
      "MethodList:Method",
    ],
    field_type: [
      MetaType.UINT32,
      MetaType.STRING_IDX,
      MetaType.STRING_IDX,
      MetaType.TDOR_IDX,
      MetaType.TABLE_IDX,
      MetaType.TABLE_IDX,
    ],
  },
  { // TABLE_FIELD_POINTER
    name: "FieldPtr",
    fields: [
      "Field",
    ],
    field_type: [
      MetaType.TABLE_IDX,
    ],
  },
  { // TABLE_FIELD
    name: "Field",
    fields: [
      "Flags",
      "Name",
      "Signature",
    ],
    field_type: [
      MetaType.UINT16,
      MetaType.STRING_IDX,
      MetaType.BLOB_IDX,
    ],
  },
  { // TABLE_METHOD_POINTER
    name: "MethodPtr",
    fields: [
      "Method",
    ],
    field_type: [
      MetaType.TABLE_IDX,
    ],
  },
  { // TABLE_METHOD
    name: "Method",
    fields: [
      "RVA",
      "ImplFlags#MethodImplAttributes",
      "Flags#MethodAttribute",
      "Name",
      "Signature",
      "ParamList:Param",
    ],
    field_type: [
      MetaType.UINT32,
      MetaType.UINT16,
      MetaType.UINT16,
      MetaType.STRING_IDX,
      MetaType.BLOB_IDX,
      MetaType.TABLE_IDX,
    ],
  },
  { // TABLE_PARAM_POINTER
    name: "ParamPtr",
    fields: [
      "Param",
    ],
    field_type: [
      MetaType.TABLE_IDX,
    ],
  },
  { // TABLE_PARAM
    name: "Param",
    fields: [
      "Flags",
      "Sequence",
      "Name",
    ],
    field_type: [
      MetaType.UINT16,
      MetaType.UINT16,
      MetaType.STRING_IDX,
    ],
  },
  { // TABLE_INTERFACEIMPL
    name: "InterfaceImpl",
    fields: [
      "Class:TypeDef",
      "Interface=TypeDefOrRef",
    ],
    field_type: [
      MetaType.TABLE_IDX,
      MetaType.TDOR_IDX,
    ],
  },
  { // TABLE_MEMBERREF
    name: "MemberRef",
    fields: [
      "Class",
      "Name",
      "Signature",
    ],
    field_type: [
      MetaType.MRP_IDX,
      MetaType.STRING_IDX,
      MetaType.BLOB_IDX,
    ],
  },
  { // TABLE_CONSTANT
    name: "Constant",
    fields: [
      "Type",
      "PaddingZero",
      "Parent",
      "Value",
    ],
    field_type: [
      MetaType.UINT8,
      MetaType.UINT8,
      MetaType.CONST_IDX,
      MetaType.BLOB_IDX,
    ],
  },
  { // TABLE_CUSTOMATTRIBUTE
    name: "CustomAttribute",
    fields: [
      "Parent",
      "Type",
      "Value",
    ],
    field_type: [
      MetaType.HASCAT_IDX,
      MetaType.CAT_IDX,
      MetaType.BLOB_IDX,
    ],
  },
  { // TABLE_FIELDMARSHAL
    name: "FieldMarshal",
    fields: [
      "Parent",
      "NativeType",
    ],
    field_type: [
      MetaType.HFM_IDX,
      MetaType.BLOB_IDX,
    ],
  },
  { // TABLE_DECLSECURITY
    name: "DeclSecurity",
    fields: [
      "Action",
      "Parent",
      "PermissionSet",
    ],
    field_type: [
      MetaType.UINT16,
      MetaType.HASDEC_IDX,
      MetaType.BLOB_IDX,
    ],
  },
  { // TABLE_CLASSLAYOUT
    name: "ClassLayout",
    fields: [
      "PackingSize",
      "ClassSize",
      "Parent:TypeDef",
    ],
    field_type: [
      MetaType.UINT16,
      MetaType.UINT32,
      MetaType.TABLE_IDX,
    ],
  },
  { // TABLE_FIELDLAYOUT
    name: "FieldLayoutt",
    fields: [
      "Offset",
      "Field:Field",
    ],
    field_type: [
      MetaType.UINT32,
      MetaType.TABLE_IDX,
    ],
  },
  { // TABLE_STANDALONESIG
    name: "StandaloneSig",
    fields: [
      "Signature",
    ],
    field_type: [
      MetaType.BLOB_IDX,
    ],
  },
  { // TABLE_EVENTMAP
    name: "EventMap",
    fields: [
      "Parent:TypeDef",
      "EventList:Event",
    ],
    field_type: [
      MetaType.TABLE_IDX,
      MetaType.TABLE_IDX,
    ],
  },
  { // TABLE_EVENT_POINTER
    name: "EventPtr",
    fields: [
      "Event",
    ],
    field_type: [
      MetaType.TABLE_IDX,
    ],
  },
  { // TABLE_EVENT
    name: "Event",
    fields: [
      "EventFlags#EventAttribute",
      "Name",
      "EventType",
    ],
    field_type: [
      MetaType.UINT16,
      MetaType.STRING_IDX,
      MetaType.TDOR_IDX,
    ],
  },
  { // TABLE_PROPERTYMAP
    name: "PropertyMap",
    fields: [
      "Parent:TypeDef",
      "PropertyList:Property",
    ],
    field_type: [
      MetaType.TABLE_IDX,
      MetaType.TABLE_IDX,
    ],
  },
  { // TABLE_PROPERTY_POINTER
    name: "PropertyPtr",
    fields: [
      "Property",
    ],
    field_type: [
      MetaType.TABLE_IDX,
    ],
  },
  { // TABLE_PROPERTY
    name: "Property",
    fields: [
      "Flags",
      "Name",
      "Type",
    ],
    field_type: [
      MetaType.UINT16,
      MetaType.STRING_IDX,
      MetaType.BLOB_IDX,
    ],
  },
  { // TABLE_METHODSEMANTICS
    name: "MethodSemantics",
    fields: [
      "MethodSemantic",
      "Method:Method",
      "Association",
    ],
    field_type: [
      MetaType.UINT16,
      MetaType.TABLE_IDX,
      MetaType.HS_IDX,
    ],
  },
  { // TABLE_METHODIMPL
    name: "MethodImpl",
    fields: [
      "Class:TypeDef",
      "MethodBody",
      "MethodDeclaration",
    ],
    field_type: [
      MetaType.TABLE_IDX,
      MetaType.MDOR_IDX,
      MetaType.MDOR_IDX,
    ],
  },
  { // TABLE_MODULEREF
    name: "Moduleref",
    fields: [
      "Name",
    ],
    field_type: [
      MetaType.STRING_IDX,
    ],
  },
  { // TABLE_TYPESPEC
    name: "TypeSpec",
    fields: [
      "Signature",
    ],
    field_type: [
      MetaType.BLOB_IDX,
    ],
  },
  { // TABLE_IMPLMAP
    name: "ImplMap",
    fields: [
      "MappingFlag",
      "MemberForwarded",
      "ImportName",
      "ImportScope:ModuleRef",
    ],
    field_type: [
      MetaType.UINT16,
      MetaType.MF_IDX,
      MetaType.STRING_IDX,
      MetaType.TABLE_IDX,
    ],
  },
  { // TABLE_FIELDRVA
    name: "FieldRVA",
    fields: [
      "RVA",
      "Field:Field",
    ],
    field_type: [
      MetaType.UINT32,
      MetaType.TABLE_IDX,
    ],
  },
  { // TABLE_UNUSED6
    name: "",
    fields: [
    ],
    field_type: [
    ],
  },
  { // TABLE_UNUSED7
    name: "",
    fields: [
    ],
    field_type: [
    ],
  },
  { // TABLE_ASSEMBLY
    name: "Assembly",
    fields: [
      "HashId",
      "Major",
      "Minor",
      "BuildNumber",
      "RevisionNumber",
      "Flags",
      "PublicKey",
      "Name",
      "Culture",
    ],
    field_type: [
      MetaType.UINT32,
      MetaType.UINT16,
      MetaType.UINT16,
      MetaType.UINT16,
      MetaType.UINT16,
      MetaType.UINT32,
      MetaType.BLOB_IDX,
      MetaType.STRING_IDX,
      MetaType.STRING_IDX,
    ],
  },
  { // TABLE_ASSEMBLYPROCESSOR
    name: "AssemblyProcessor",
    fields: [
      "Processor",
    ],
    field_type: [
      MetaType.UINT32,
    ],
  },
  { // TABLE_ASSEMBLYOS
    name: "AssemblyOS",
    fields: [
      "OSPlatformID",
      "OSMajor",
      "OSMinor",
    ],
    field_type: [
      MetaType.UINT32,
      MetaType.UINT32,
      MetaType.UINT32,
    ],
  },
  { // TABLE_ASSEMBLYREF
    name: "AssemblyRef",
    fields: [
      "Major",
      "Minor",
      "Build",
      "Revision",
      "Flags",
      "PublicKeyOrToken",
      "Name",
      "Culture",
      "HashValue",
    ],
    field_type: [
      MetaType.UINT16,
      MetaType.UINT16,
      MetaType.UINT16,
      MetaType.UINT16,
      MetaType.UINT32,
      MetaType.BLOB_IDX,
      MetaType.STRING_IDX,
      MetaType.STRING_IDX,
      MetaType.BLOB_IDX,
    ],
  },
  { // TABLE_ASSEMBLYREFPROCESSOR
    name: "AssemblyRefProcessor",
    fields: [
      "Processor",
      "AssemblyRef:AssemblyRef",
    ],
    field_type: [
      MetaType.UINT32,
      MetaType.TABLE_IDX,
    ],
  },
  { // TABLE_ASSEMBLYREFOS
    name: "AssemblyRefOS",
    fields: [
      "OSPlatformID",
      "OSMajorVersion",
      "OSMinorVersion",
      "AssemblyRef:AssemblyRef",
    ],
    field_type: [
      MetaType.UINT32,
      MetaType.UINT32,
      MetaType.UINT32,
      MetaType.TABLE_IDX,
    ],
  },
  { // TABLE_FILE
    name: "File",
    fields: [
      "Flags",
      "Name",
      "Value",
    ],
    field_type: [
      MetaType.UINT32,
      MetaType.STRING_IDX,
      MetaType.BLOB_IDX,
    ],
  },
  { // TABLE_EXPORTEDTYPE
    name: "ExportedType",
    fields: [
      "Flags",
      "TypeDefId",
      "TypeName",
      "TypeNameSpace",
      "Implementation",
    ],
    field_type: [
      MetaType.UINT32,
      MetaType.TABLE_IDX,
      MetaType.STRING_IDX,
      MetaType.STRING_IDX,
      MetaType.IMPL_IDX,
    ],
  },
  { // TABLE_MANIFESTRESOURCE
    name: "ManifestResource",
    fields: [
      "Offset",
      "Flags",
      "Name",
      "Implementation",
    ],
    field_type: [
      MetaType.UINT32,
      MetaType.UINT32,
      MetaType.STRING_IDX,
      MetaType.IMPL_IDX,
    ],
  },
  { // TABLE_NESTEDCLASS
    name: "NestedClass",
    fields: [
      "NestedClass:TypeDef",
      "EnclosingClass:TypeDef",
    ],
    field_type: [
      MetaType.TABLE_IDX,
      MetaType.TABLE_IDX,
    ],
  },
  { // TABLE_GENERICPARAM
    name: "GenericParam",
    fields: [
      "Number",
      "Flags",
      "Owner",
      "Name",
    ],
    field_type: [
      MetaType.UINT16,
      MetaType.UINT16,
      MetaType.TABLE_IDX,
      MetaType.STRING_IDX,
    ],
  },
  { // TABLE_METHODSPEC
    name: "MethodSpec",
    fields: [
      "Method",
      "Signature",
    ],
    field_type: [
      MetaType.MDOR_IDX,
      MetaType.BLOB_IDX,
    ],
  },
  { // TABLE_GENERICPARAMCONSTRAINT
    name: "GenericParamConstraint",
    fields: [
      "GenericParam",
      "Constraint",
    ],
    field_type: [
      MetaType.TABLE_IDX,
      MetaType.TDOR_IDX,
    ],
  },
]; // end of TableSchema
/** @const {Array.<Object>} */
var Opcodes = [
  { // 0x00 (Pop0 -> Push0)
    name    : "nop",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x01 (Pop0 -> Push0)
    name    : "break",
    argument: C.InlineNone,
    flow    : C.FLOW_BREAK,
  },
  { // 0x02 (Pop0 -> Push1)
    name    : "ldarg.0",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x03 (Pop0 -> Push1)
    name    : "ldarg.1",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x04 (Pop0 -> Push1)
    name    : "ldarg.2",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x05 (Pop0 -> Push1)
    name    : "ldarg.3",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x06 (Pop0 -> Push1)
    name    : "ldloc.0",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x07 (Pop0 -> Push1)
    name    : "ldloc.1",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x08 (Pop0 -> Push1)
    name    : "ldloc.2",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x09 (Pop0 -> Push1)
    name    : "ldloc.3",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x0A (Pop1 -> Push0)
    name    : "stloc.0",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x0B (Pop1 -> Push0)
    name    : "stloc.1",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x0C (Pop1 -> Push0)
    name    : "stloc.2",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x0D (Pop1 -> Push0)
    name    : "stloc.3",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x0E (Pop0 -> Push1)
    name    : "ldarg.s",
    argument: C.ShortInlineVar,
    flow    : C.FLOW_NEXT,
  },
  { // 0x0F (Pop0 -> PushI)
    name    : "ldarga.s",
    argument: C.ShortInlineVar,
    flow    : C.FLOW_NEXT,
  },
  { // 0x10 (Pop1 -> Push0)
    name    : "starg.s",
    argument: C.ShortInlineVar,
    flow    : C.FLOW_NEXT,
  },
  { // 0x11 (Pop0 -> Push1)
    name    : "ldloc.s",
    argument: C.ShortInlineVar,
    flow    : C.FLOW_NEXT,
  },
  { // 0x12 (Pop0 -> PushI)
    name    : "ldloca.s",
    argument: C.ShortInlineVar,
    flow    : C.FLOW_NEXT,
  },
  { // 0x13 (Pop1 -> Push0)
    name    : "stloc.s",
    argument: C.ShortInlineVar,
    flow    : C.FLOW_NEXT,
  },
  { // 0x14 (Pop0 -> PushRef)
    name    : "ldnull",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x15 (Pop0 -> PushI)
    name    : "ldc.i4.m1",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x16 (Pop0 -> PushI)
    name    : "ldc.i4.0",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x17 (Pop0 -> PushI)
    name    : "ldc.i4.1",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x18 (Pop0 -> PushI)
    name    : "ldc.i4.2",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x19 (Pop0 -> PushI)
    name    : "ldc.i4.3",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x1A (Pop0 -> PushI)
    name    : "ldc.i4.4",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x1B (Pop0 -> PushI)
    name    : "ldc.i4.5",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x1C (Pop0 -> PushI)
    name    : "ldc.i4.6",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x1D (Pop0 -> PushI)
    name    : "ldc.i4.7",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x1E (Pop0 -> PushI)
    name    : "ldc.i4.8",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x1F (Pop0 -> PushI)
    name    : "ldc.i4.s",
    argument: C.ShortInlineI,
    flow    : C.FLOW_NEXT,
  },
  { // 0x20 (Pop0 -> PushI)
    name    : "ldc.i4",
    argument: C.InlineI,
    flow    : C.FLOW_NEXT,
  },
  { // 0x21 (Pop0 -> PushI8)
    name    : "ldc.i8",
    argument: C.InlineI8,
    flow    : C.FLOW_NEXT,
  },
  { // 0x22 (Pop0 -> PushR4)
    name    : "ldc.r4",
    argument: C.ShortInlineR,
    flow    : C.FLOW_NEXT,
  },
  { // 0x23 (Pop0 -> PushR8)
    name    : "ldc.r8",
    argument: C.InlineR,
    flow    : C.FLOW_NEXT,
  },
  { // 0x24 (Pop0 -> Push0)
    name    : "unused99",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x25 (Pop1 -> Push1+Push1)
    name    : "dup",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x26 (Pop1 -> Push0)
    name    : "pop",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x27 (Pop0 -> Push0)
    name    : "jmp",
    argument: C.InlineMethod,
    flow    : C.FLOW_CALL,
  },
  { // 0x28 (VarPop -> VarPush)
    name    : "call",
    argument: C.InlineMethod,
    flow    : C.FLOW_CALL,
  },
  { // 0x29 (VarPop -> VarPush)
    name    : "calli",
    argument: C.InlineSig,
    flow    : C.FLOW_CALL,
  },
  { // 0x2A (VarPop -> Push0)
    name    : "ret",
    argument: C.InlineNone,
    flow    : C.FLOW_RETURN,
  },
  { // 0x2B (Pop0 -> Push0)
    name    : "br.s",
    argument: C.ShortInlineBrTarget,
    flow    : C.FLOW_BRANCH,
  },
  { // 0x2C (PopI -> Push0)
    name    : "brfalse.s",
    argument: C.ShortInlineBrTarget,
    flow    : C.FLOW_COND_BRANCH,
  },
  { // 0x2D (PopI -> Push0)
    name    : "brtrue.s",
    argument: C.ShortInlineBrTarget,
    flow    : C.FLOW_COND_BRANCH,
  },
  { // 0x2E (Pop1+Pop1 -> Push0)
    name    : "beq.s",
    argument: C.ShortInlineBrTarget,
    flow    : C.FLOW_COND_BRANCH,
  },
  { // 0x2F (Pop1+Pop1 -> Push0)
    name    : "bge.s",
    argument: C.ShortInlineBrTarget,
    flow    : C.FLOW_COND_BRANCH,
  },
  { // 0x30 (Pop1+Pop1 -> Push0)
    name    : "bgt.s",
    argument: C.ShortInlineBrTarget,
    flow    : C.FLOW_COND_BRANCH,
  },
  { // 0x31 (Pop1+Pop1 -> Push0)
    name    : "ble.s",
    argument: C.ShortInlineBrTarget,
    flow    : C.FLOW_COND_BRANCH,
  },
  { // 0x32 (Pop1+Pop1 -> Push0)
    name    : "blt.s",
    argument: C.ShortInlineBrTarget,
    flow    : C.FLOW_COND_BRANCH,
  },
  { // 0x33 (Pop1+Pop1 -> Push0)
    name    : "bne.un.s",
    argument: C.ShortInlineBrTarget,
    flow    : C.FLOW_COND_BRANCH,
  },
  { // 0x34 (Pop1+Pop1 -> Push0)
    name    : "bge.un.s",
    argument: C.ShortInlineBrTarget,
    flow    : C.FLOW_COND_BRANCH,
  },
  { // 0x35 (Pop1+Pop1 -> Push0)
    name    : "bgt.un.s",
    argument: C.ShortInlineBrTarget,
    flow    : C.FLOW_COND_BRANCH,
  },
  { // 0x36 (Pop1+Pop1 -> Push0)
    name    : "ble.un.s",
    argument: C.ShortInlineBrTarget,
    flow    : C.FLOW_COND_BRANCH,
  },
  { // 0x37 (Pop1+Pop1 -> Push0)
    name    : "blt.un.s",
    argument: C.ShortInlineBrTarget,
    flow    : C.FLOW_COND_BRANCH,
  },
  { // 0x38 (Pop0 -> Push0)
    name    : "br",
    argument: C.InlineBrTarget,
    flow    : C.FLOW_BRANCH,
  },
  { // 0x39 (PopI -> Push0)
    name    : "brfalse",
    argument: C.InlineBrTarget,
    flow    : C.FLOW_COND_BRANCH,
  },
  { // 0x3A (PopI -> Push0)
    name    : "brtrue",
    argument: C.InlineBrTarget,
    flow    : C.FLOW_COND_BRANCH,
  },
  { // 0x3B (Pop1+Pop1 -> Push0)
    name    : "beq",
    argument: C.InlineBrTarget,
    flow    : C.FLOW_COND_BRANCH,
  },
  { // 0x3C (Pop1+Pop1 -> Push0)
    name    : "bge",
    argument: C.InlineBrTarget,
    flow    : C.FLOW_COND_BRANCH,
  },
  { // 0x3D (Pop1+Pop1 -> Push0)
    name    : "bgt",
    argument: C.InlineBrTarget,
    flow    : C.FLOW_COND_BRANCH,
  },
  { // 0x3E (Pop1+Pop1 -> Push0)
    name    : "ble",
    argument: C.InlineBrTarget,
    flow    : C.FLOW_COND_BRANCH,
  },
  { // 0x3F (Pop1+Pop1 -> Push0)
    name    : "blt",
    argument: C.InlineBrTarget,
    flow    : C.FLOW_COND_BRANCH,
  },
  { // 0x40 (Pop1+Pop1 -> Push0)
    name    : "bne.un",
    argument: C.InlineBrTarget,
    flow    : C.FLOW_COND_BRANCH,
  },
  { // 0x41 (Pop1+Pop1 -> Push0)
    name    : "bge.un",
    argument: C.InlineBrTarget,
    flow    : C.FLOW_COND_BRANCH,
  },
  { // 0x42 (Pop1+Pop1 -> Push0)
    name    : "bgt.un",
    argument: C.InlineBrTarget,
    flow    : C.FLOW_COND_BRANCH,
  },
  { // 0x43 (Pop1+Pop1 -> Push0)
    name    : "ble.un",
    argument: C.InlineBrTarget,
    flow    : C.FLOW_COND_BRANCH,
  },
  { // 0x44 (Pop1+Pop1 -> Push0)
    name    : "blt.un",
    argument: C.InlineBrTarget,
    flow    : C.FLOW_COND_BRANCH,
  },
  { // 0x45 (PopI -> Push0)
    name    : "switch",
    argument: C.InlineSwitch,
    flow    : C.FLOW_COND_BRANCH,
  },
  { // 0x46 (PopI -> PushI)
    name    : "ldind.i1",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x47 (PopI -> PushI)
    name    : "ldind.u1",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x48 (PopI -> PushI)
    name    : "ldind.i2",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x49 (PopI -> PushI)
    name    : "ldind.u2",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x4A (PopI -> PushI)
    name    : "ldind.i4",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x4B (PopI -> PushI)
    name    : "ldind.u4",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x4C (PopI -> PushI8)
    name    : "ldind.i8",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x4D (PopI -> PushI)
    name    : "ldind.i",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x4E (PopI -> PushR4)
    name    : "ldind.r4",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x4F (PopI -> PushR8)
    name    : "ldind.r8",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x50 (PopI -> PushRef)
    name    : "ldind.ref",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x51 (PopI+PopI -> Push0)
    name    : "stind.ref",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x52 (PopI+PopI -> Push0)
    name    : "stind.i1",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x53 (PopI+PopI -> Push0)
    name    : "stind.i2",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x54 (PopI+PopI -> Push0)
    name    : "stind.i4",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x55 (PopI+PopI8 -> Push0)
    name    : "stind.i8",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x56 (PopI+PopR4 -> Push0)
    name    : "stind.r4",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x57 (PopI+PopR8 -> Push0)
    name    : "stind.r8",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x58 (Pop1+Pop1 -> Push1)
    name    : "add",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x59 (Pop1+Pop1 -> Push1)
    name    : "sub",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x5A (Pop1+Pop1 -> Push1)
    name    : "mul",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x5B (Pop1+Pop1 -> Push1)
    name    : "div",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x5C (Pop1+Pop1 -> Push1)
    name    : "div.un",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x5D (Pop1+Pop1 -> Push1)
    name    : "rem",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x5E (Pop1+Pop1 -> Push1)
    name    : "rem.un",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x5F (Pop1+Pop1 -> Push1)
    name    : "and",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x60 (Pop1+Pop1 -> Push1)
    name    : "or",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x61 (Pop1+Pop1 -> Push1)
    name    : "xor",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x62 (Pop1+Pop1 -> Push1)
    name    : "shl",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x63 (Pop1+Pop1 -> Push1)
    name    : "shr",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x64 (Pop1+Pop1 -> Push1)
    name    : "shr.un",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x65 (Pop1 -> Push1)
    name    : "neg",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x66 (Pop1 -> Push1)
    name    : "not",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x67 (Pop1 -> PushI)
    name    : "conv.i1",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x68 (Pop1 -> PushI)
    name    : "conv.i2",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x69 (Pop1 -> PushI)
    name    : "conv.i4",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x6A (Pop1 -> PushI8)
    name    : "conv.i8",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x6B (Pop1 -> PushR4)
    name    : "conv.r4",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x6C (Pop1 -> PushR8)
    name    : "conv.r8",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x6D (Pop1 -> PushI)
    name    : "conv.u4",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x6E (Pop1 -> PushI8)
    name    : "conv.u8",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x6F (VarPop -> VarPush)
    name    : "callvirt",
    argument: C.InlineMethod,
    flow    : C.FLOW_CALL,
  },
  { // 0x70 (PopI+PopI -> Push0)
    name    : "cpobj",
    argument: C.InlineType,
    flow    : C.FLOW_NEXT,
  },
  { // 0x71 (PopI -> Push1)
    name    : "ldobj",
    argument: C.InlineType,
    flow    : C.FLOW_NEXT,
  },
  { // 0x72 (Pop0 -> PushRef)
    name    : "ldstr",
    argument: C.InlineString,
    flow    : C.FLOW_NEXT,
  },
  { // 0x73 (VarPop -> PushRef)
    name    : "newobj",
    argument: C.InlineMethod,
    flow    : C.FLOW_CALL,
  },
  { // 0x74 (PopRef -> PushRef)
    name    : "castclass",
    argument: C.InlineType,
    flow    : C.FLOW_NEXT,
  },
  { // 0x75 (PopRef -> PushI)
    name    : "isinst",
    argument: C.InlineType,
    flow    : C.FLOW_NEXT,
  },
  { // 0x76 (Pop1 -> PushR8)
    name    : "conv.r.un",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x77 (Pop0 -> Push0)
    name    : "unused58",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x78 (Pop0 -> Push0)
    name    : "unused1",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x79 (PopRef -> PushI)
    name    : "unbox",
    argument: C.InlineType,
    flow    : C.FLOW_NEXT,
  },
  { // 0x7A (PopRef -> Push0)
    name    : "throw",
    argument: C.InlineNone,
    flow    : C.FLOW_THROW,
  },
  { // 0x7B (PopRef -> Push1)
    name    : "ldfld",
    argument: C.InlineField,
    flow    : C.FLOW_NEXT,
  },
  { // 0x7C (PopRef -> PushI)
    name    : "ldflda",
    argument: C.InlineField,
    flow    : C.FLOW_NEXT,
  },
  { // 0x7D (PopRef+Pop1 -> Push0)
    name    : "stfld",
    argument: C.InlineField,
    flow    : C.FLOW_NEXT,
  },
  { // 0x7E (Pop0 -> Push1)
    name    : "ldsfld",
    argument: C.InlineField,
    flow    : C.FLOW_NEXT,
  },
  { // 0x7F (Pop0 -> PushI)
    name    : "ldsflda",
    argument: C.InlineField,
    flow    : C.FLOW_NEXT,
  },
  { // 0x80 (Pop1 -> Push0)
    name    : "stsfld",
    argument: C.InlineField,
    flow    : C.FLOW_NEXT,
  },
  { // 0x81 (PopI+Pop1 -> Push0)
    name    : "stobj",
    argument: C.InlineType,
    flow    : C.FLOW_NEXT,
  },
  { // 0x82 (Pop1 -> PushI)
    name    : "conv.ovf.i1.un",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x83 (Pop1 -> PushI)
    name    : "conv.ovf.i2.un",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x84 (Pop1 -> PushI)
    name    : "conv.ovf.i4.un",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x85 (Pop1 -> PushI8)
    name    : "conv.ovf.i8.un",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x86 (Pop1 -> PushI)
    name    : "conv.ovf.u1.un",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x87 (Pop1 -> PushI)
    name    : "conv.ovf.u2.un",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x88 (Pop1 -> PushI)
    name    : "conv.ovf.u4.un",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x89 (Pop1 -> PushI8)
    name    : "conv.ovf.u8.un",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x8A (Pop1 -> PushI)
    name    : "conv.ovf.i.un",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x8B (Pop1 -> PushI)
    name    : "conv.ovf.u.un",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x8C (Pop1 -> PushRef)
    name    : "box",
    argument: C.InlineType,
    flow    : C.FLOW_NEXT,
  },
  { // 0x8D (PopI -> PushRef)
    name    : "newarr",
    argument: C.InlineType,
    flow    : C.FLOW_NEXT,
  },
  { // 0x8E (PopRef -> PushI)
    name    : "ldlen",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x8F (PopRef+PopI -> PushI)
    name    : "ldelema",
    argument: C.InlineType,
    flow    : C.FLOW_NEXT,
  },
  { // 0x90 (PopRef+PopI -> PushI)
    name    : "ldelem.i1",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x91 (PopRef+PopI -> PushI)
    name    : "ldelem.u1",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x92 (PopRef+PopI -> PushI)
    name    : "ldelem.i2",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x93 (PopRef+PopI -> PushI)
    name    : "ldelem.u2",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x94 (PopRef+PopI -> PushI)
    name    : "ldelem.i4",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x95 (PopRef+PopI -> PushI)
    name    : "ldelem.u4",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x96 (PopRef+PopI -> PushI8)
    name    : "ldelem.i8",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x97 (PopRef+PopI -> PushI)
    name    : "ldelem.i",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x98 (PopRef+PopI -> PushR4)
    name    : "ldelem.r4",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x99 (PopRef+PopI -> PushR8)
    name    : "ldelem.r8",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x9A (PopRef+PopI -> PushRef)
    name    : "ldelem.ref",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x9B (PopRef+PopI+PopI -> Push0)
    name    : "stelem.i",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x9C (PopRef+PopI+PopI -> Push0)
    name    : "stelem.i1",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x9D (PopRef+PopI+PopI -> Push0)
    name    : "stelem.i2",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x9E (PopRef+PopI+PopI -> Push0)
    name    : "stelem.i4",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x9F (PopRef+PopI+PopI8 -> Push0)
    name    : "stelem.i8",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xA0 (PopRef+PopI+PopR4 -> Push0)
    name    : "stelem.r4",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xA1 (PopRef+PopI+PopR8 -> Push0)
    name    : "stelem.r8",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xA2 (PopRef+PopI+PopRef -> Push0)
    name    : "stelem.ref",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xA3 (PopRef+PopI -> Push1)
    name    : "ldelem",
    argument: C.InlineType,
    flow    : C.FLOW_NEXT,
  },
  { // 0xA4 (PopRef+PopI+Pop1 -> Push0)
    name    : "stelem",
    argument: C.InlineType,
    flow    : C.FLOW_NEXT,
  },
  { // 0xA5 (PopRef -> Push1)
    name    : "unbox.any",
    argument: C.InlineType,
    flow    : C.FLOW_NEXT,
  },
  { // 0xA6 (Pop0 -> Push0)
    name    : "unused5",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xA7 (Pop0 -> Push0)
    name    : "unused6",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xA8 (Pop0 -> Push0)
    name    : "unused7",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xA9 (Pop0 -> Push0)
    name    : "unused8",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xAA (Pop0 -> Push0)
    name    : "unused9",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xAB (Pop0 -> Push0)
    name    : "unused10",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xAC (Pop0 -> Push0)
    name    : "unused11",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xAD (Pop0 -> Push0)
    name    : "unused12",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xAE (Pop0 -> Push0)
    name    : "unused13",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xAF (Pop0 -> Push0)
    name    : "unused14",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xB0 (Pop0 -> Push0)
    name    : "unused15",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xB1 (Pop0 -> Push0)
    name    : "unused16",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xB2 (Pop0 -> Push0)
    name    : "unused17",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xB3 (Pop1 -> PushI)
    name    : "conv.ovf.i1",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xB4 (Pop1 -> PushI)
    name    : "conv.ovf.u1",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xB5 (Pop1 -> PushI)
    name    : "conv.ovf.i2",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xB6 (Pop1 -> PushI)
    name    : "conv.ovf.u2",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xB7 (Pop1 -> PushI)
    name    : "conv.ovf.i4",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xB8 (Pop1 -> PushI)
    name    : "conv.ovf.u4",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xB9 (Pop1 -> PushI8)
    name    : "conv.ovf.i8",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xBA (Pop1 -> PushI8)
    name    : "conv.ovf.u8",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xBB (Pop0 -> Push0)
    name    : "unused50",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xBC (Pop0 -> Push0)
    name    : "unused18",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xBD (Pop0 -> Push0)
    name    : "unused19",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xBE (Pop0 -> Push0)
    name    : "unused20",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xBF (Pop0 -> Push0)
    name    : "unused21",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xC0 (Pop0 -> Push0)
    name    : "unused22",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xC1 (Pop0 -> Push0)
    name    : "unused23",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xC2 (Pop1 -> PushI)
    name    : "refanyval",
    argument: C.InlineType,
    flow    : C.FLOW_NEXT,
  },
  { // 0xC3 (Pop1 -> PushR8)
    name    : "ckfinite",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xC4 (Pop0 -> Push0)
    name    : "unused24",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xC5 (Pop0 -> Push0)
    name    : "unused25",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xC6 (PopI -> Push1)
    name    : "mkrefany",
    argument: C.InlineType,
    flow    : C.FLOW_NEXT,
  },
  { // 0xC7 (Pop0 -> Push0)
    name    : "unused59",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xC8 (Pop0 -> Push0)
    name    : "unused60",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xC9 (Pop0 -> Push0)
    name    : "unused61",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xCA (Pop0 -> Push0)
    name    : "unused62",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xCB (Pop0 -> Push0)
    name    : "unused63",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xCC (Pop0 -> Push0)
    name    : "unused64",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xCD (Pop0 -> Push0)
    name    : "unused65",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xCE (Pop0 -> Push0)
    name    : "unused66",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xCF (Pop0 -> Push0)
    name    : "unused67",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xD0 (Pop0 -> PushI)
    name    : "ldtoken",
    argument: C.InlineTok,
    flow    : C.FLOW_NEXT,
  },
  { // 0xD1 (Pop1 -> PushI)
    name    : "conv.u2",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xD2 (Pop1 -> PushI)
    name    : "conv.u1",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xD3 (Pop1 -> PushI)
    name    : "conv.i",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xD4 (Pop1 -> PushI)
    name    : "conv.ovf.i",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xD5 (Pop1 -> PushI)
    name    : "conv.ovf.u",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xD6 (Pop1+Pop1 -> Push1)
    name    : "add.ovf",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xD7 (Pop1+Pop1 -> Push1)
    name    : "add.ovf.un",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xD8 (Pop1+Pop1 -> Push1)
    name    : "mul.ovf",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xD9 (Pop1+Pop1 -> Push1)
    name    : "mul.ovf.un",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xDA (Pop1+Pop1 -> Push1)
    name    : "sub.ovf",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xDB (Pop1+Pop1 -> Push1)
    name    : "sub.ovf.un",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xDC (Pop0 -> Push0)
    name    : "endfinally",
    argument: C.InlineNone,
    flow    : C.FLOW_RETURN,
  },
  { // 0xDD (Pop0 -> Push0)
    name    : "leave",
    argument: C.InlineBrTarget,
    flow    : C.FLOW_BRANCH,
  },
  { // 0xDE (Pop0 -> Push0)
    name    : "leave.s",
    argument: C.ShortInlineBrTarget,
    flow    : C.FLOW_BRANCH,
  },
  { // 0xDF (PopI+PopI -> Push0)
    name    : "stind.i",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xE0 (Pop1 -> PushI)
    name    : "conv.u",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xE1 (Pop0 -> Push0)
    name    : "unused26",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xE2 (Pop0 -> Push0)
    name    : "unused27",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xE3 (Pop0 -> Push0)
    name    : "unused28",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xE4 (Pop0 -> Push0)
    name    : "unused29",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xE5 (Pop0 -> Push0)
    name    : "unused30",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xE6 (Pop0 -> Push0)
    name    : "unused31",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xE7 (Pop0 -> Push0)
    name    : "unused32",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xE8 (Pop0 -> Push0)
    name    : "unused33",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xE9 (Pop0 -> Push0)
    name    : "unused34",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xEA (Pop0 -> Push0)
    name    : "unused35",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xEB (Pop0 -> Push0)
    name    : "unused36",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xEC (Pop0 -> Push0)
    name    : "unused37",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xED (Pop0 -> Push0)
    name    : "unused38",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xEE (Pop0 -> Push0)
    name    : "unused39",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xEF (Pop0 -> Push0)
    name    : "unused40",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xF0 (Pop0 -> Push0)
    name    : "unused41",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xF1 (Pop0 -> Push0)
    name    : "unused42",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xF2 (Pop0 -> Push0)
    name    : "unused43",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xF3 (Pop0 -> Push0)
    name    : "unused44",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xF4 (Pop0 -> Push0)
    name    : "unused45",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xF5 (Pop0 -> Push0)
    name    : "unused46",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xF6 (Pop0 -> Push0)
    name    : "unused47",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xF7 (Pop0 -> Push0)
    name    : "unused48",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0xF8 (Pop0 -> Push0)
    name    : "prefix7",
    argument: C.InlineNone,
    flow    : C.FLOW_META,
  },
  { // 0xF9 (Pop0 -> Push0)
    name    : "prefix6",
    argument: C.InlineNone,
    flow    : C.FLOW_META,
  },
  { // 0xFA (Pop0 -> Push0)
    name    : "prefix5",
    argument: C.InlineNone,
    flow    : C.FLOW_META,
  },
  { // 0xFB (Pop0 -> Push0)
    name    : "prefix4",
    argument: C.InlineNone,
    flow    : C.FLOW_META,
  },
  { // 0xFC (Pop0 -> Push0)
    name    : "prefix3",
    argument: C.InlineNone,
    flow    : C.FLOW_META,
  },
  { // 0xFD (Pop0 -> Push0)
    name    : "prefix2",
    argument: C.InlineNone,
    flow    : C.FLOW_META,
  },
  { // 0xFE (Pop0 -> Push0)
    name    : "prefix1",
    argument: C.InlineNone,
    flow    : C.FLOW_META,
  },
  { // 0xFF (Pop0 -> Push0)
    name    : "prefixref",
    argument: C.InlineNone,
    flow    : C.FLOW_META,
  },
  { // 0x00 (Pop0 -> PushI)
    name    : "arglist",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x01 (Pop1+Pop1 -> PushI)
    name    : "ceq",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x02 (Pop1+Pop1 -> PushI)
    name    : "cgt",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x03 (Pop1+Pop1 -> PushI)
    name    : "cgt.un",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x04 (Pop1+Pop1 -> PushI)
    name    : "clt",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x05 (Pop1+Pop1 -> PushI)
    name    : "clt.un",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x06 (Pop0 -> PushI)
    name    : "ldftn",
    argument: C.InlineMethod,
    flow    : C.FLOW_NEXT,
  },
  { // 0x07 (PopRef -> PushI)
    name    : "ldvirtftn",
    argument: C.InlineMethod,
    flow    : C.FLOW_NEXT,
  },
  { // 0x08 (Pop0 -> Push0)
    name    : "unused56",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x09 (Pop0 -> Push1)
    name    : "ldarg",
    argument: C.InlineVar,
    flow    : C.FLOW_NEXT,
  },
  { // 0x0A (Pop0 -> PushI)
    name    : "ldarga",
    argument: C.InlineVar,
    flow    : C.FLOW_NEXT,
  },
  { // 0x0B (Pop1 -> Push0)
    name    : "starg",
    argument: C.InlineVar,
    flow    : C.FLOW_NEXT,
  },
  { // 0x0C (Pop0 -> Push1)
    name    : "ldloc",
    argument: C.InlineVar,
    flow    : C.FLOW_NEXT,
  },
  { // 0x0D (Pop0 -> PushI)
    name    : "ldloca",
    argument: C.InlineVar,
    flow    : C.FLOW_NEXT,
  },
  { // 0x0E (Pop1 -> Push0)
    name    : "stloc",
    argument: C.InlineVar,
    flow    : C.FLOW_NEXT,
  },
  { // 0x0F (PopI -> PushI)
    name    : "localloc",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x10 (Pop0 -> Push0)
    name    : "unused57",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x11 (PopI -> Push0)
    name    : "endfilter",
    argument: C.InlineNone,
    flow    : C.FLOW_RETURN,
  },
  { // 0x12 (Pop0 -> Push0)
    name    : "unaligned.",
    argument: C.ShortInlineI,
    flow    : C.FLOW_META,
  },
  { // 0x13 (Pop0 -> Push0)
    name    : "volatile.",
    argument: C.InlineNone,
    flow    : C.FLOW_META,
  },
  { // 0x14 (Pop0 -> Push0)
    name    : "tail.",
    argument: C.InlineNone,
    flow    : C.FLOW_META,
  },
  { // 0x15 (PopI -> Push0)
    name    : "initobj",
    argument: C.InlineType,
    flow    : C.FLOW_NEXT,
  },
  { // 0x16 (Pop0 -> Push0)
    name    : "constrained.",
    argument: C.InlineType,
    flow    : C.FLOW_META,
  },
  { // 0x17 (PopI+PopI+PopI -> Push0)
    name    : "cpblk",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x18 (PopI+PopI+PopI -> Push0)
    name    : "initblk",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x19 (Pop0 -> Push0)
    name    : "no.",
    argument: C.ShortInlineI,
    flow    : C.FLOW_NEXT,
  },
  { // 0x1A (Pop0 -> Push0)
    name    : "rethrow",
    argument: C.InlineNone,
    flow    : C.FLOW_THROW,
  },
  { // 0x1B (Pop0 -> Push0)
    name    : "unused",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x1C (Pop0 -> PushI)
    name    : "sizeof",
    argument: C.InlineType,
    flow    : C.FLOW_NEXT,
  },
  { // 0x1D (Pop1 -> PushI)
    name    : "refanytype",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x1E (Pop0 -> Push0)
    name    : "readonly.",
    argument: C.InlineNone,
    flow    : C.FLOW_META,
  },
  { // 0x1F (Pop0 -> Push0)
    name    : "unused53",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x20 (Pop0 -> Push0)
    name    : "unused54",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x21 (Pop0 -> Push0)
    name    : "unused55",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x22 (Pop0 -> Push0)
    name    : "unused70",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x00 (Pop0 -> Push0)
    name    : "illegal",
    argument: C.InlineNone,
    flow    : C.FLOW_META,
  },
  { // 0x00 (Pop0 -> Push0)
    name    : "endmac",
    argument: C.InlineNone,
    flow    : C.FLOW_META,
  },
  { // 0x00 (VarPop -> VarPush)
    name    : "mono_icall",
    argument: C.ShortInlineI,
    flow    : C.FLOW_NEXT,
  },
  { // 0x01 (Pop1 -> PushI)
    name    : "mono_objaddr",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x02 (Pop0 -> PushI)
    name    : "mono_ldptr",
    argument: C.InlineI,
    flow    : C.FLOW_NEXT,
  },
  { // 0x03 (Pop1 -> PushI)
    name    : "mono_vtaddr",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x04 (Pop0 -> PushRef)
    name    : "mono_newobj",
    argument: C.InlineType,
    flow    : C.FLOW_NEXT,
  },
  { // 0x05 (PopI -> Push0)
    name    : "mono_retobj",
    argument: C.InlineType,
    flow    : C.FLOW_RETURN,
  },
  { // 0x06 (PopI -> Push1)
    name    : "mono_ldnativeobj",
    argument: C.InlineType,
    flow    : C.FLOW_RETURN,
  },
  { // 0x07 (PopRef -> Push1)
    name    : "mono_cisinst",
    argument: C.InlineType,
    flow    : C.FLOW_NEXT,
  },
  { // 0x08 (PopRef -> Push1)
    name    : "mono_ccastclass",
    argument: C.InlineType,
    flow    : C.FLOW_NEXT,
  },
  { // 0x09 (Pop0 -> Push0)
    name    : "mono_save_lmf",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x0A (Pop0 -> Push0)
    name    : "mono_restore_lmf",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x0B (Pop0 -> PushI)
    name    : "mono_classconst",
    argument: C.InlineI,
    flow    : C.FLOW_NEXT,
  },
  { // 0x0C (Pop0 -> Push0)
    name    : "mono_not_taken",
    argument: C.InlineNone,
    flow    : C.FLOW_NEXT,
  },
  { // 0x0D (Pop0 -> PushI)
    name    : "mono_tls",
    argument: C.InlineI,
    flow    : C.FLOW_NEXT,
  },
  { // 0x0E (Pop0 -> PushI)
    name    : "mono_icall_addr",
    argument: C.InlineI,
    flow    : C.FLOW_NEXT,
  },
  { // 0x0F (Pop0 -> PushI)
    name    : "mono_dyn_call",
    argument: C.InlineI,
    flow    : C.FLOW_NEXT,
  },
  { // 0x10 (Pop0 -> Push0)
    name    : "mono_memory_barrier",
    argument: C.InlineI,
    flow    : C.FLOW_NEXT,
  },
]; // end of Opcodes

exports.TableSchema = TableSchema;
exports.MetaType    = MetaType;
exports.C           = C;
exports.Opcodes     = Opcodes;
